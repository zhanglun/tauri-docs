(window.webpackJsonp=window.webpackJsonp||[]).push([[345],{422:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return l})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return i})),r.d(t,"default",(function(){return s}));var a=r(3),n=(r(0),r(454));const l={title:"Fn tauri::api::rpc::format_callback_result",sidebar_label:"fn.format_callback_result",custom_edit_url:null},c={unversionedId:"api/rust/tauri/api/rpc/fn.format_callback_result",id:"api/rust/tauri/api/rpc/fn.format_callback_result",isDocsHomePage:!1,title:"Fn tauri::api::rpc::format_callback_result",description:"`rs",source:"@site/docs/zh-hans/api/rust/tauri/api/rpc/fn.format_callback_result.md",sourceDirName:"api/rust/tauri/api/rpc",slug:"/api/rust/tauri/api/rpc/fn.format_callback_result",permalink:"/tauri-docs/docs/api/rust/tauri/api/rpc/fn.format_callback_result",editUrl:null,version:"current",sidebar_label:"fn.format_callback_result",frontMatter:{title:"Fn tauri::api::rpc::format_callback_result",sidebar_label:"fn.format_callback_result",custom_edit_url:null},sidebar:"docs",previous:{title:"Fn tauri::api::rpc::format_callback",permalink:"/tauri-docs/docs/api/rust/tauri/api/rpc/fn.format_callback"},next:{title:"Fn tauri::api::version::compare",permalink:"/tauri-docs/docs/api/rust/tauri/api/version/fn.compare"}},i=[{value:"Examples",id:"examples",children:[]}],o={toc:i};function s({components:e,...t}){return Object(n.b)("wrapper",Object(a.a)({},o,t,{components:e,mdxType:"MDXLayout"}),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-rs"},"pub fn format_callback_result<T:\xa0Serialize, E:\xa0Serialize>(\n\xa0\xa0\xa0\xa0result: Result<T, E>, \n\xa0\xa0\xa0\xa0success_callback: impl AsRef<str>, \n\xa0\xa0\xa0\xa0error_callback: impl AsRef<str>\n) -> Result<String>\n")),Object(n.b)("p",null,"Expand description"),Object(n.b)("p",null,"Formats a Result type to its Promise response. Useful for Promises handling. If the Result ",Object(n.b)("inlineCode",{parentName:"p"},"is_ok()"),", the callback will be the ",Object(n.b)("inlineCode",{parentName:"p"},"success_callback")," function name and the argument will be the Ok value. If the Result ",Object(n.b)("inlineCode",{parentName:"p"},"is_err()"),", the callback will be the ",Object(n.b)("inlineCode",{parentName:"p"},"error_callback")," function name and the argument will be the Err value."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"result")," the Result to check"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"success_callback")," the function name of the Ok callback. Usually the ",Object(n.b)("inlineCode",{parentName:"li"},"resolve")," of the JS Promise."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"error_callback")," the function name of the Err callback. Usually the ",Object(n.b)("inlineCode",{parentName:"li"},"reject")," of the JS Promise.")),Object(n.b)("p",null,"Note that the callback strings are automatically generated by the ",Object(n.b)("inlineCode",{parentName:"p"},"invoke")," helper."),Object(n.b)("h2",{id:"examples"},"Examples"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-rs"},'use tauri::api::rpc::format_callback_result;\nlet res: Result<u8, &str> = Ok(5);\nlet cb = format_callback_result(res, "success_cb", "error_cb").expect("failed to format");\nassert!(cb.contains(r#"window["success_cb"](5)"#));\n\nlet res: Result<&str, &str> = Err("error message here");\nlet cb = format_callback_result(res, "success_cb", "error_cb").expect("failed to format");\nassert!(cb.contains(r#"window["error_cb"]("error message here")"#));\n')))}s.isMDXComponent=!0},454:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return m}));var a=r(0),n=r.n(a);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=n.a.createContext({}),u=function(e){var t=n.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},f=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=u(r),f=a,m=p["".concat(c,".").concat(f)]||p[f]||b[f]||l;return r?n.a.createElement(m,i(i({ref:t},s),{},{components:r})):n.a.createElement(m,i({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,c=new Array(l);c[0]=f;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var s=2;s<l;s++)c[s]=r[s];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"}}]);