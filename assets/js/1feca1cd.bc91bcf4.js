(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{131:function(t,e,r){"use strict";r.r(e),r.d(e,"frontMatter",(function(){return n})),r.d(e,"metadata",(function(){return i})),r.d(e,"toc",(function(){return s})),r.d(e,"default",(function(){return u}));var o=r(3),a=r(7),c=(r(0),r(454)),n={title:"Struct tauri::http::ResponseBuilder",sidebar_label:"struct.ResponseBuilder",custom_edit_url:null},i={unversionedId:"api/rust/tauri/http/struct.ResponseBuilder",id:"api/rust/tauri/http/struct.ResponseBuilder",isDocsHomePage:!1,title:"Struct tauri::http::ResponseBuilder",description:"x3A;:ResponseBuilder,",source:"@site/docs/en/api/rust/tauri/http/struct.ResponseBuilder.md",sourceDirName:"api/rust/tauri/http",slug:"/api/rust/tauri/http/struct.ResponseBuilder",permalink:"/en/docs/api/rust/tauri/http/struct.ResponseBuilder",editUrl:null,version:"current",sidebar_label:"struct.ResponseBuilder",frontMatter:{title:"Struct tauri::http::ResponseBuilder",sidebar_label:"struct.ResponseBuilder",custom_edit_url:null},sidebar:"docs",previous:{title:"Struct tauri::http::Response",permalink:"/en/docs/api/rust/tauri/http/struct.Response"},next:{title:"Struct tauri::http::ResponseParts",permalink:"/en/docs/api/rust/tauri/http/struct.ResponseParts"}},s=[{value:"Implementations",id:"implementations",children:[{value:"impl struct tauri::http::ResponseBuilder",id:"impl-struct-taurihttpresponsebuilder",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Errors",id:"errors",children:[]},{value:"Examples",id:"examples-1",children:[]},{value:"Trait Implementations",id:"trait-implementations",children:[{value:"impl trait core::fmt::Debug for struct tauri::http::ResponseBuilder",id:"impl-trait-corefmtdebug-for-struct-taurihttpresponsebuilder",children:[]},{value:"impl trait core::default::Default for struct tauri::http::ResponseBuilder",id:"impl-trait-coredefaultdefault-for-struct-taurihttpresponsebuilder",children:[]}]},{value:"Auto Trait Implementations",id:"auto-trait-implementations",children:[{value:"impl !trait std::panic::RefUnwindSafe for struct tauri::http::ResponseBuilder",id:"impl-trait-stdpanicrefunwindsafe-for-struct-taurihttpresponsebuilder",children:[]},{value:"impl !trait core::marker::Send for struct tauri::http::ResponseBuilder",id:"impl-trait-coremarkersend-for-struct-taurihttpresponsebuilder",children:[]},{value:"impl !trait core::marker::Sync for struct tauri::http::ResponseBuilder",id:"impl-trait-coremarkersync-for-struct-taurihttpresponsebuilder",children:[]},{value:"impl trait core::marker::Unpin for struct tauri::http::ResponseBuilder",id:"impl-trait-coremarkerunpin-for-struct-taurihttpresponsebuilder",children:[]},{value:"impl !trait std::panic::UnwindSafe for struct tauri::http::ResponseBuilder",id:"impl-trait-stdpanicunwindsafe-for-struct-taurihttpresponsebuilder",children:[]}]},{value:"Blanket Implementations",id:"blanket-implementations",children:[{value:"impl&lt;T&gt; trait core::any::Any for T where T: &#39;static + ?trait core::marker::Sized,goto source code",id:"implt-trait-coreanyany-for-t-where-t-static--trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait core::borrow::Borrow&lt;T&gt; for T where T: ?trait core::marker::Sized,goto source code",id:"implt-trait-coreborrowborrowt-for-t-where-t-trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait core::borrow::BorrowMut&lt;T&gt; for T where T: ?trait core::marker::Sized,goto source code",id:"implt-trait-coreborrowborrowmutt-for-t-where-t-trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait core::convert::From&lt;T&gt; for Tgoto source code",id:"implt-trait-coreconvertfromt-for-tgoto-source-code",children:[]},{value:"impl&lt;T, U&gt; trait core::convert::Into&lt;U&gt; for T where U: trait core::convert::From&lt;T&gt;,goto source code",id:"implt-u-trait-coreconvertintou-for-t-where-u-trait-coreconvertfromtgoto-source-code",children:[]},{value:"impl&lt;T, U&gt; trait core::convert::TryFrom&lt;U&gt; for T where U: trait core::convert::Into&lt;T&gt;,goto source code",id:"implt-u-trait-coreconverttryfromu-for-t-where-u-trait-coreconvertintotgoto-source-code",children:[]},{value:"impl&lt;T, U&gt; trait core::convert::TryInto&lt;U&gt; for T where U: trait core::convert::TryFrom&lt;T&gt;,goto source code",id:"implt-u-trait-coreconverttryintou-for-t-where-u-trait-coreconverttryfromtgoto-source-code",children:[]},{value:"impl&lt;V, T&gt; VZip&lt;V&gt; for T where V: MultiLane&lt;T&gt;,",id:"implv-t-vzipv-for-t-where-v-multilanet",children:[]}]}],l={toc:s};function u(t){var e=t.components,r=Object(a.a)(t,["components"]);return Object(c.b)("wrapper",Object(o.a)({},l,r,{components:e,mdxType:"MDXLayout"}),Object(c.b)("p",null,"x3A;:ResponseBuilder,"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},"pub struct ResponseBuilder { /* fields omitted */ }\n")),Object(c.b)("p",null,"Expand description"),Object(c.b)("p",null,"An HTTP response builder"),Object(c.b)("p",null,"This type can be used to construct an instance of ",Object(c.b)("inlineCode",{parentName:"p"},"Response")," through a builder-like pattern."),Object(c.b)("h2",{id:"implementations"},"Implementations"),Object(c.b)("h3",{id:"impl-struct-taurihttpresponsebuilder"},"impl ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")),Object(c.b)("h4",{id:"pub-fn-new---struct-taurihttpresponsebuilder"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.new"},"new"),"() -> ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")),Object(c.b)("p",null,"Creates a new default instance of ",Object(c.b)("inlineCode",{parentName:"p"},"Builder")," to construct either a ",Object(c.b)("inlineCode",{parentName:"p"},"Head")," or a ",Object(c.b)("inlineCode",{parentName:"p"},"Response"),"."),Object(c.b)("h2",{id:"examples"},"Examples"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let response = ResponseBuilder::new()\n    .status(200)\n    .mimetype("text/html")\n    .body(Vec::new())\n    .unwrap();\n')),Object(c.b)("h4",{id:"pub-fn-mimetypeself-mimetype-str---struct-taurihttpresponsebuilder"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.mimetype"},"mimetype"),"(self, mimetype: &",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),") -> ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")),Object(c.b)("p",null,"Set the HTTP mimetype for this response."),Object(c.b)("h4",{id:"pub-fn-statustself-status-t---struct-taurihttpresponsebuilder-where-struct-taurihttpstatusstatuscode-trait-coreconverttryfromt-struct-taurihttpstatusstatuscode-as-trait-coreconverttryfromttype-coreconverttryfromerror-trait-coreconvertintoerror"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.status"},"status"),"<","T>(self, status: T) -> ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")," where ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/status/struct.StatusCode",title:"struct tauri::http::status::StatusCode"},"StatusCode"),": ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>, ","<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/status/struct.StatusCode",title:"struct tauri::http::status::StatusCode"},"StatusCode")," as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),": ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","Error>,"),Object(c.b)("p",null,"Set the HTTP status for this response."),Object(c.b)("h4",{id:"pub-fn-versionself-version-struct-taurihttpversionversion---struct-taurihttpresponsebuilder"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.version"},"version"),"(self, version: ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/version/struct.Version",title:"struct tauri::http::version::Version"},"Version"),") -> ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")),Object(c.b)("p",null,"Set the HTTP version for this response."),Object(c.b)("p",null,"This function will configure the HTTP version of the ",Object(c.b)("inlineCode",{parentName:"p"},"Response")," that will be returned from ",Object(c.b)("inlineCode",{parentName:"p"},"Builder::build"),"."),Object(c.b)("p",null,"By default this is HTTP/1.1"),Object(c.b)("h4",{id:"pub-fn-headerk-vself-key-k-value-v---struct-taurihttpresponsebuilder-where-struct-taurihttpheaderheadername-trait-coreconverttryfromk-struct-taurihttpheaderheadername-as-trait-coreconverttryfromktype-coreconverttryfromerror-trait-coreconvertintoerror-struct-taurihttpheaderheadervalue-trait-coreconverttryfromv-struct-taurihttpheaderheadervalue-as-trait-coreconverttryfromvtype-coreconverttryfromerror-trait-coreconvertintoerror"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.header"},"header"),"<","K, V>(self, key: K, value: V) -> ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")," where ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/header/struct.HeaderName",title:"struct tauri::http::header::HeaderName"},"HeaderName"),": ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","K>, ","<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/header/struct.HeaderName",title:"struct tauri::http::header::HeaderName"},"HeaderName")," as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","K>>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),": ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","Error>, ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/header/struct.HeaderValue",title:"struct tauri::http::header::HeaderValue"},"HeaderValue"),": ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","V>, ","<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/header/struct.HeaderValue",title:"struct tauri::http::header::HeaderValue"},"HeaderValue")," as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","V>>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),": ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","Error>,"),Object(c.b)("p",null,"Appends a header to this response builder."),Object(c.b)("p",null,"This function will append the provided key/value as a header to the internal ",Object(c.b)("inlineCode",{parentName:"p"},"HeaderMap")," being constructed. Essentially this is equivalent to calling ",Object(c.b)("inlineCode",{parentName:"p"},"HeaderMap::append"),"."),Object(c.b)("h4",{id:"pub-fn-body-self-body-struct-allocvecvecu8-struct-allocallocglobal----enum-coreresultresultstruct-taurihttpresponse-struct-allocboxedboxdyn-trait-stderrorerror--static-struct-allocallocglobal"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.body"},"body"),"( self, body: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/vec/struct.Vec.html",title:"struct alloc::vec::Vec"},"Vec"),"<",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.u8.html"},"u8"),", ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html",title:"struct alloc::alloc::Global"},"Global"),"> ) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Response",title:"struct tauri::http::Response"},"Response"),", ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html",title:"struct alloc::boxed::Box"},"Box"),"<","dyn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/error/trait.Error.html",title:"trait std::error::Error"},"Error")," + 'static, ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html",title:"struct alloc::alloc::Global"},"Global"),">>"),Object(c.b)("p",null,"\u201cConsumes\u201d this builder, using the provided ",Object(c.b)("inlineCode",{parentName:"p"},"body")," to return a constructed ",Object(c.b)("inlineCode",{parentName:"p"},"Response"),"."),Object(c.b)("h2",{id:"errors"},"Errors"),Object(c.b)("p",null,"This function may return an error if any previously configured argument failed to parse or get converted to the internal representation. For example if an invalid ",Object(c.b)("inlineCode",{parentName:"p"},"head")," was specified via ",Object(c.b)("inlineCode",{parentName:"p"},'header("Foo", "Bar\\r\\n")')," the error will be returned when this function is called rather than when ",Object(c.b)("inlineCode",{parentName:"p"},"header")," was called."),Object(c.b)("h2",{id:"examples-1"},"Examples"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let response = ResponseBuilder::new()\n    .mimetype("text/html")\n    .body(Vec::new())\n    .unwrap();\n')),Object(c.b)("h2",{id:"trait-implementations"},"Trait Implementations"),Object(c.b)("h3",{id:"impl-trait-corefmtdebug-for-struct-taurihttpresponsebuilder"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html",title:"trait core::fmt::Debug"},"Debug")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")),Object(c.b)("h4",{id:"pub-fn-fmtself-f-mut-struct-corefmtformatter_---enum-coreresultresult-struct-corefmterror"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt"},"fmt"),"(&self, f: &mut ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html",title:"struct core::fmt::Formatter"},"Formatter"),"<","'","_",">) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.unit.html"},"()"),", ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html",title:"struct core::fmt::Error"},"Error"),">"),Object(c.b)("p",null,"Formats the value using the given formatter. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt"},"Read more")),Object(c.b)("h3",{id:"impl-trait-coredefaultdefault-for-struct-taurihttpresponsebuilder"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html",title:"trait core::default::Default"},"Default")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")),Object(c.b)("h4",{id:"pub-fn-default---struct-taurihttpresponsebuilder"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default"},"default"),"() -> ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")),Object(c.b)("p",null,"Returns the \u201cdefault value\u201d for a type. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default"},"Read more")),Object(c.b)("h2",{id:"auto-trait-implementations"},"Auto Trait Implementations"),Object(c.b)("h3",{id:"impl-trait-stdpanicrefunwindsafe-for-struct-taurihttpresponsebuilder"},"impl \\","!",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html",title:"trait std::panic::RefUnwindSafe"},"RefUnwindSafe")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")),Object(c.b)("h3",{id:"impl-trait-coremarkersend-for-struct-taurihttpresponsebuilder"},"impl \\","!",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html",title:"trait core::marker::Send"},"Send")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")),Object(c.b)("h3",{id:"impl-trait-coremarkersync-for-struct-taurihttpresponsebuilder"},"impl \\","!",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html",title:"trait core::marker::Sync"},"Sync")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")),Object(c.b)("h3",{id:"impl-trait-coremarkerunpin-for-struct-taurihttpresponsebuilder"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html",title:"trait core::marker::Unpin"},"Unpin")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")),Object(c.b)("h3",{id:"impl-trait-stdpanicunwindsafe-for-struct-taurihttpresponsebuilder"},"impl \\","!",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html",title:"trait std::panic::UnwindSafe"},"UnwindSafe")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.ResponseBuilder",title:"struct tauri::http::ResponseBuilder"},"Builder")),Object(c.b)("h2",{id:"blanket-implementations"},"Blanket Implementations"),Object(c.b)("h3",{id:"implt-trait-coreanyany-for-t-where-t-static--trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html",title:"trait core::any::Any"},"Any")," for T where T: 'static + ?",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-type_idself---struct-coreanytypeidgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id"},"type_id"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html",title:"struct core::any::TypeId"},"TypeId"),Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Gets the ",Object(c.b)("inlineCode",{parentName:"p"},"TypeId")," of ",Object(c.b)("inlineCode",{parentName:"p"},"self"),". ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id"},"Read more")),Object(c.b)("h3",{id:"implt-trait-coreborrowborrowt-for-t-where-t-trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html",title:"trait core::borrow::Borrow"},"Borrow"),"<","T> for T where T: ?",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-borrowself---tgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow"},"borrow"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&"),"T",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Immutably borrows from an owned value. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow"},"Read more")),Object(c.b)("h3",{id:"implt-trait-coreborrowborrowmutt-for-t-where-t-trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html",title:"trait core::borrow::BorrowMut"},"BorrowMut"),"<","T> for T where T: ?",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-borrow_mutmut-self---muttgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut"},"borrow_mut"),"(&mut self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&mut"),"T",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Mutably borrows from an owned value. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut"},"Read more")),Object(c.b)("h3",{id:"implt-trait-coreconvertfromt-for-tgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html",title:"trait core::convert::From"},"From"),"<","T> for T",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-fromt-t---tgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from"},"from"),"(t: T) -> T",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"implt-u-trait-coreconvertintou-for-t-where-u-trait-coreconvertfromtgoto-source-code"},"impl","<","T, U> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","U> for T where U: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html",title:"trait core::convert::From"},"From"),"<","T>,",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-intoself---ugoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into"},"into"),"(self) -> U",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"implt-u-trait-coreconverttryfromu-for-t-where-u-trait-coreconvertintotgoto-source-code"},"impl","<","T, U> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","U> for T where U: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","T>,",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-error--enum-coreconvertinfallible"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error"},"Error")," = ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html",title:"enum core::convert::Infallible"},"Infallible")),Object(c.b)("p",null,"The type returned in the event of a conversion error."),Object(c.b)("h4",{id:"pub-fn-try_fromvalue-u---enum-coreresultresultt-t-as-trait-coreconverttryfromutype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from"},"try_from"),"(value: U) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<","T, ","<","T as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","U>>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"implt-u-trait-coreconverttryintou-for-t-where-u-trait-coreconverttryfromtgoto-source-code"},"impl","<","T, U> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html",title:"trait core::convert::TryInto"},"TryInto"),"<","U> for T where U: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>,",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-error--u-as-trait-coreconverttryfromttype-coreconverttryfromerror"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error"},"Error")," = ","<","U as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error")),Object(c.b)("p",null,"The type returned in the event of a conversion error."),Object(c.b)("h4",{id:"pub-fn-try_intoself---enum-coreresultresultu-u-as-trait-coreconverttryfromttype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into"},"try_into"),"(self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<","U, ","<","U as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"implv-t-vzipv-for-t-where-v-multilanet"},"impl","<","V, T> VZip","<","V> for T where V: MultiLane","<","T>,"),Object(c.b)("h4",{id:"pub-fn-vzipself---v"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#tymethod.vzip"},"vzip"),"(self) -> V"))}u.isMDXComponent=!0},454:function(t,e,r){"use strict";r.d(e,"a",(function(){return p})),r.d(e,"b",(function(){return d}));var o=r(0),a=r.n(o);function c(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,o)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){c(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,o,a=function(t,e){if(null==t)return{};var r,o,a={},c=Object.keys(t);for(o=0;o<c.length;o++)r=c[o],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(o=0;o<c.length;o++)r=c[o],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var l=a.a.createContext({}),u=function(t){var e=a.a.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},p=function(t){var e=u(t.components);return a.a.createElement(l.Provider,{value:e},t.children)},h={inlineCode:"code",wrapper:function(t){var e=t.children;return a.a.createElement(a.a.Fragment,{},e)}},m=a.a.forwardRef((function(t,e){var r=t.components,o=t.mdxType,c=t.originalType,n=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),p=u(r),m=o,d=p["".concat(n,".").concat(m)]||p[m]||h[m]||c;return r?a.a.createElement(d,i(i({ref:e},l),{},{components:r})):a.a.createElement(d,i({ref:e},l))}));function d(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var c=r.length,n=new Array(c);n[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:o,n[1]=i;for(var l=2;l<c;l++)n[l]=r[l];return a.a.createElement.apply(null,n)}return a.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);