(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{178:function(t,r,e){"use strict";e.r(r),e.d(r,"frontMatter",(function(){return n})),e.d(r,"metadata",(function(){return i})),e.d(r,"toc",(function(){return s})),e.d(r,"default",(function(){return h}));var a=e(3),o=e(7),c=(e(0),e(454)),n={title:"Struct tauri::http::header::VacantEntry",sidebar_label:"struct.VacantEntry",custom_edit_url:null},i={unversionedId:"api/rust/tauri/http/header/struct.VacantEntry",id:"api/rust/tauri/http/header/struct.VacantEntry",isDocsHomePage:!1,title:"Struct tauri::http::header::VacantEntry",description:"x3A;:VacantEntry,",source:"@site/docs/zh-hans/api/rust/tauri/http/header/struct.VacantEntry.md",sourceDirName:"api/rust/tauri/http/header",slug:"/api/rust/tauri/http/header/struct.VacantEntry",permalink:"/tauri-docs/docs/api/rust/tauri/http/header/struct.VacantEntry",editUrl:null,version:"current",sidebar_label:"struct.VacantEntry",frontMatter:{title:"Struct tauri::http::header::VacantEntry",sidebar_label:"struct.VacantEntry",custom_edit_url:null},sidebar:"docs",previous:{title:"Struct tauri::http::header::ToStrError",permalink:"/tauri-docs/docs/api/rust/tauri/http/header/struct.ToStrError"},next:{title:"Struct tauri::http::header::ValueDrain",permalink:"/tauri-docs/docs/api/rust/tauri/http/header/struct.ValueDrain"}},s=[{value:"Implementations",id:"implementations",children:[{value:"impl&lt;&#39;a, T&gt; struct tauri::http::header::VacantEntry&lt;&#39;a, T&gt;goto source code",id:"impla-t-struct-taurihttpheadervacantentrya-tgoto-source-code",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Examples",id:"examples-1",children:[]},{value:"Examples",id:"examples-2",children:[]},{value:"Examples",id:"examples-3",children:[]},{value:"Trait Implementations",id:"trait-implementations",children:[{value:"impl&lt;&#39;a, T&gt; trait core::fmt::Debug for struct tauri::http::header::VacantEntry&lt;&#39;a, T&gt; where T: trait core::fmt::Debug,goto source code",id:"impla-t-trait-corefmtdebug-for-struct-taurihttpheadervacantentrya-t-where-t-trait-corefmtdebuggoto-source-code",children:[]}]},{value:"Auto Trait Implementations",id:"auto-trait-implementations",children:[{value:"impl&lt;&#39;a, T&gt; trait std::panic::RefUnwindSafe for struct tauri::http::header::VacantEntry&lt;&#39;a, T&gt; where T: trait std::panic::RefUnwindSafe,",id:"impla-t-trait-stdpanicrefunwindsafe-for-struct-taurihttpheadervacantentrya-t-where-t-trait-stdpanicrefunwindsafe",children:[]},{value:"impl&lt;&#39;a, T&gt; trait core::marker::Send for struct tauri::http::header::VacantEntry&lt;&#39;a, T&gt; where T: trait core::marker::Send,",id:"impla-t-trait-coremarkersend-for-struct-taurihttpheadervacantentrya-t-where-t-trait-coremarkersend",children:[]},{value:"impl&lt;&#39;a, T&gt; trait core::marker::Sync for struct tauri::http::header::VacantEntry&lt;&#39;a, T&gt; where T: trait core::marker::Sync,",id:"impla-t-trait-coremarkersync-for-struct-taurihttpheadervacantentrya-t-where-t-trait-coremarkersync",children:[]},{value:"impl&lt;&#39;a, T&gt; trait core::marker::Unpin for struct tauri::http::header::VacantEntry&lt;&#39;a, T&gt;",id:"impla-t-trait-coremarkerunpin-for-struct-taurihttpheadervacantentrya-t",children:[]},{value:"impl&lt;&#39;a, T&gt; !trait std::panic::UnwindSafe for struct tauri::http::header::VacantEntry&lt;&#39;a, T&gt;",id:"impla-t-trait-stdpanicunwindsafe-for-struct-taurihttpheadervacantentrya-t",children:[]}]},{value:"Blanket Implementations",id:"blanket-implementations",children:[{value:"impl&lt;T&gt; trait core::any::Any for T where T: &#39;static + ?trait core::marker::Sized,goto source code",id:"implt-trait-coreanyany-for-t-where-t-static--trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait core::borrow::Borrow&lt;T&gt; for T where T: ?trait core::marker::Sized,goto source code",id:"implt-trait-coreborrowborrowt-for-t-where-t-trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait core::borrow::BorrowMut&lt;T&gt; for T where T: ?trait core::marker::Sized,goto source code",id:"implt-trait-coreborrowborrowmutt-for-t-where-t-trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait core::convert::From&lt;T&gt; for Tgoto source code",id:"implt-trait-coreconvertfromt-for-tgoto-source-code",children:[]},{value:"impl&lt;T, U&gt; trait core::convert::Into&lt;U&gt; for T where U: trait core::convert::From&lt;T&gt;,goto source code",id:"implt-u-trait-coreconvertintou-for-t-where-u-trait-coreconvertfromtgoto-source-code",children:[]},{value:"impl&lt;T, U&gt; trait core::convert::TryFrom&lt;U&gt; for T where U: trait core::convert::Into&lt;T&gt;,goto source code",id:"implt-u-trait-coreconverttryfromu-for-t-where-u-trait-coreconvertintotgoto-source-code",children:[]},{value:"impl&lt;T, U&gt; trait core::convert::TryInto&lt;U&gt; for T where U: trait core::convert::TryFrom&lt;T&gt;,goto source code",id:"implt-u-trait-coreconverttryintou-for-t-where-u-trait-coreconverttryfromtgoto-source-code",children:[]},{value:"impl&lt;V, T&gt; VZip&lt;V&gt; for T where V: MultiLane&lt;T&gt;,",id:"implv-t-vzipv-for-t-where-v-multilanet",children:[]}]}],l={toc:s};function h(t){var r=t.components,e=Object(o.a)(t,["components"]);return Object(c.b)("wrapper",Object(a.a)({},l,e,{components:r,mdxType:"MDXLayout"}),Object(c.b)("p",null,"x3A;:header::VacantEntry,"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},"pub struct VacantEntry<'a, T> { /* fields omitted */ }\n")),Object(c.b)("p",null,"Expand description"),Object(c.b)("p",null,"A view into a single empty location in a ",Object(c.b)("inlineCode",{parentName:"p"},"HeaderMap"),"."),Object(c.b)("p",null,"This struct is returned as part of the ",Object(c.b)("inlineCode",{parentName:"p"},"Entry")," enum."),Object(c.b)("h2",{id:"implementations"},"Implementations"),Object(c.b)("h3",{id:"impla-t-struct-taurihttpheadervacantentrya-tgoto-source-code"},"impl","<","'a, T> ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.VacantEntry",title:"struct tauri::http::header::VacantEntry"},"VacantEntry"),"<","'a, T>",Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2365-2452",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-keyself---struct-taurihttpheaderheadernamegoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.key"},"key"),"(&self) -> &",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.HeaderName",title:"struct tauri::http::header::HeaderName"},"HeaderName"),Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2376",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Returns a reference to the entry\u2019s key"),Object(c.b)("h2",{id:"examples"},"Examples"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let mut map = HeaderMap::new();\n\nassert_eq!(map.entry("x-hello").key().as_str(), "x-hello");\n')),Object(c.b)("h4",{id:"pub-fn-into_keyself---struct-taurihttpheaderheadernamegoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.into_key"},"into_key"),"(self) -> ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.HeaderName",title:"struct tauri::http::header::HeaderName"},"HeaderName"),Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2392",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Take ownership of the key"),Object(c.b)("h2",{id:"examples-1"},"Examples"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let mut map = HeaderMap::new();\n\nif let Entry::Vacant(v) = map.entry("x-hello") {\n    assert_eq!(v.into_key().as_str(), "x-hello");\n}\n')),Object(c.b)("h4",{id:"pub-fn-insertself-value-t---a-muttgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.insert"},"insert"),"(self, value: T) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&'a mut"),"T",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2413",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Insert the value into the entry."),Object(c.b)("p",null,"The value will be associated with this entry\u2019s key. A mutable reference to the inserted value will be returned."),Object(c.b)("h2",{id:"examples-2"},"Examples"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let mut map = HeaderMap::new();\n\nif let Entry::Vacant(v) = map.entry("x-hello") {\n    v.insert("world".parse().unwrap());\n}\n\nassert_eq!(map["x-hello"], "world");\n')),Object(c.b)("h4",{id:"pub-fn-insert_entryself-value-t---struct-taurihttpheaderoccupiedentrya-tgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.insert_entry"},"insert_entry"),"(self, value: T) -> ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.OccupiedEntry",title:"struct tauri::http::header::OccupiedEntry"},"OccupiedEntry"),"<","'a, T>",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/header/map.rs.html#2440",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Insert the value into the entry."),Object(c.b)("p",null,"The value will be associated with this entry\u2019s key. The new ",Object(c.b)("inlineCode",{parentName:"p"},"OccupiedEntry")," is returned, allowing for further manipulation."),Object(c.b)("h2",{id:"examples-3"},"Examples"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let mut map = HeaderMap::new();\n\nif let Entry::Vacant(v) = map.entry("x-hello") {\n    let mut e = v.insert_entry("world".parse().unwrap());\n    e.insert("world2".parse().unwrap());\n}\n\nassert_eq!(map["x-hello"], "world2");\n')),Object(c.b)("h2",{id:"trait-implementations"},"Trait Implementations"),Object(c.b)("h3",{id:"impla-t-trait-corefmtdebug-for-struct-taurihttpheadervacantentrya-t-where-t-trait-corefmtdebuggoto-source-code"},"impl","<","'a, T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html",title:"trait core::fmt::Debug"},"Debug")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.VacantEntry",title:"struct tauri::http::header::VacantEntry"},"VacantEntry"),"<","'a, T> where T: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html",title:"trait core::fmt::Debug"},"Debug"),",",Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/header/map.rs.html#168",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-fmtself-f-mut-struct-corefmtformatter_---enum-coreresultresult-struct-corefmterrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt"},"fmt"),"(&self, f: &mut ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html",title:"struct core::fmt::Formatter"},"Formatter"),"<","'","_",">) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.unit.html"},"()"),", ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html",title:"struct core::fmt::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/header/map.rs.html#168",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Formats the value using the given formatter. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt"},"Read more")),Object(c.b)("h2",{id:"auto-trait-implementations"},"Auto Trait Implementations"),Object(c.b)("h3",{id:"impla-t-trait-stdpanicrefunwindsafe-for-struct-taurihttpheadervacantentrya-t-where-t-trait-stdpanicrefunwindsafe"},"impl","<","'a, T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html",title:"trait std::panic::RefUnwindSafe"},"RefUnwindSafe")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.VacantEntry",title:"struct tauri::http::header::VacantEntry"},"VacantEntry"),"<","'a, T> where T: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html",title:"trait std::panic::RefUnwindSafe"},"RefUnwindSafe"),","),Object(c.b)("h3",{id:"impla-t-trait-coremarkersend-for-struct-taurihttpheadervacantentrya-t-where-t-trait-coremarkersend"},"impl","<","'a, T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html",title:"trait core::marker::Send"},"Send")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.VacantEntry",title:"struct tauri::http::header::VacantEntry"},"VacantEntry"),"<","'a, T> where T: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html",title:"trait core::marker::Send"},"Send"),","),Object(c.b)("h3",{id:"impla-t-trait-coremarkersync-for-struct-taurihttpheadervacantentrya-t-where-t-trait-coremarkersync"},"impl","<","'a, T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html",title:"trait core::marker::Sync"},"Sync")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.VacantEntry",title:"struct tauri::http::header::VacantEntry"},"VacantEntry"),"<","'a, T> where T: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html",title:"trait core::marker::Sync"},"Sync"),","),Object(c.b)("h3",{id:"impla-t-trait-coremarkerunpin-for-struct-taurihttpheadervacantentrya-t"},"impl","<","'a, T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html",title:"trait core::marker::Unpin"},"Unpin")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.VacantEntry",title:"struct tauri::http::header::VacantEntry"},"VacantEntry"),"<","'a, T>"),Object(c.b)("h3",{id:"impla-t-trait-stdpanicunwindsafe-for-struct-taurihttpheadervacantentrya-t"},"impl","<","'a, T> \\","!",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html",title:"trait std::panic::UnwindSafe"},"UnwindSafe")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.VacantEntry",title:"struct tauri::http::header::VacantEntry"},"VacantEntry"),"<","'a, T>"),Object(c.b)("h2",{id:"blanket-implementations"},"Blanket Implementations"),Object(c.b)("h3",{id:"implt-trait-coreanyany-for-t-where-t-static--trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html",title:"trait core::any::Any"},"Any")," for T where T: 'static + ?",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-type_idself---struct-coreanytypeidgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id"},"type_id"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html",title:"struct core::any::TypeId"},"TypeId"),Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Gets the ",Object(c.b)("inlineCode",{parentName:"p"},"TypeId")," of ",Object(c.b)("inlineCode",{parentName:"p"},"self"),". ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id"},"Read more")),Object(c.b)("h3",{id:"implt-trait-coreborrowborrowt-for-t-where-t-trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html",title:"trait core::borrow::Borrow"},"Borrow"),"<","T> for T where T: ?",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-borrowself---tgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow"},"borrow"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&"),"T",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Immutably borrows from an owned value. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow"},"Read more")),Object(c.b)("h3",{id:"implt-trait-coreborrowborrowmutt-for-t-where-t-trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html",title:"trait core::borrow::BorrowMut"},"BorrowMut"),"<","T> for T where T: ?",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-borrow_mutmut-self---muttgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut"},"borrow_mut"),"(&mut self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&mut"),"T",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Mutably borrows from an owned value. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut"},"Read more")),Object(c.b)("h3",{id:"implt-trait-coreconvertfromt-for-tgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html",title:"trait core::convert::From"},"From"),"<","T> for T",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-fromt-t---tgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from"},"from"),"(t: T) -> T",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"implt-u-trait-coreconvertintou-for-t-where-u-trait-coreconvertfromtgoto-source-code"},"impl","<","T, U> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","U> for T where U: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html",title:"trait core::convert::From"},"From"),"<","T>,",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-intoself---ugoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into"},"into"),"(self) -> U",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"implt-u-trait-coreconverttryfromu-for-t-where-u-trait-coreconvertintotgoto-source-code"},"impl","<","T, U> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","U> for T where U: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","T>,",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-error--enum-coreconvertinfallible"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error"},"Error")," = ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html",title:"enum core::convert::Infallible"},"Infallible")),Object(c.b)("p",null,"The type returned in the event of a conversion error."),Object(c.b)("h4",{id:"pub-fn-try_fromvalue-u---enum-coreresultresultt-t-as-trait-coreconverttryfromutype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from"},"try_from"),"(value: U) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<","T, ","<","T as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","U>>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"implt-u-trait-coreconverttryintou-for-t-where-u-trait-coreconverttryfromtgoto-source-code"},"impl","<","T, U> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html",title:"trait core::convert::TryInto"},"TryInto"),"<","U> for T where U: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>,",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-error--u-as-trait-coreconverttryfromttype-coreconverttryfromerror"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error"},"Error")," = ","<","U as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error")),Object(c.b)("p",null,"The type returned in the event of a conversion error."),Object(c.b)("h4",{id:"pub-fn-try_intoself---enum-coreresultresultu-u-as-trait-coreconverttryfromttype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into"},"try_into"),"(self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<","U, ","<","U as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"implv-t-vzipv-for-t-where-v-multilanet"},"impl","<","V, T> VZip","<","V> for T where V: MultiLane","<","T>,"),Object(c.b)("h4",{id:"pub-fn-vzipself---v"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#tymethod.vzip"},"vzip"),"(self) -> V"))}h.isMDXComponent=!0},454:function(t,r,e){"use strict";e.d(r,"a",(function(){return u})),e.d(r,"b",(function(){return d}));var a=e(0),o=e.n(a);function c(t,r,e){return r in t?Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[r]=e,t}function n(t,r){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),e.push.apply(e,a)}return e}function i(t){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?n(Object(e),!0).forEach((function(r){c(t,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):n(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))}))}return t}function s(t,r){if(null==t)return{};var e,a,o=function(t,r){if(null==t)return{};var e,a,o={},c=Object.keys(t);for(a=0;a<c.length;a++)e=c[a],r.indexOf(e)>=0||(o[e]=t[e]);return o}(t,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(a=0;a<c.length;a++)e=c[a],r.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(o[e]=t[e])}return o}var l=o.a.createContext({}),h=function(t){var r=o.a.useContext(l),e=r;return t&&(e="function"==typeof t?t(r):i(i({},r),t)),e},u=function(t){var r=h(t.components);return o.a.createElement(l.Provider,{value:r},t.children)},p={inlineCode:"code",wrapper:function(t){var r=t.children;return o.a.createElement(o.a.Fragment,{},r)}},m=o.a.forwardRef((function(t,r){var e=t.components,a=t.mdxType,c=t.originalType,n=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),u=h(e),m=a,d=u["".concat(n,".").concat(m)]||u[m]||p[m]||c;return e?o.a.createElement(d,i(i({ref:r},l),{},{components:e})):o.a.createElement(d,i({ref:r},l))}));function d(t,r){var e=arguments,a=r&&r.mdxType;if("string"==typeof t||a){var c=e.length,n=new Array(c);n[0]=m;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=t,i.mdxType="string"==typeof t?t:a,n[1]=i;for(var l=2;l<c;l++)n[l]=e[l];return o.a.createElement.apply(null,n)}return o.a.createElement.apply(null,e)}m.displayName="MDXCreateElement"}}]);