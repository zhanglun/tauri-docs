(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{252:function(t,e,r){"use strict";r.r(e),r.d(e,"frontMatter",(function(){return o})),r.d(e,"metadata",(function(){return l})),r.d(e,"toc",(function(){return u})),r.d(e,"default",(function(){return s}));var n=r(3),a=r(7),i=(r(0),r(454)),o={title:"Trait tauri::ClipboardManager",sidebar_label:"trait.ClipboardManager",custom_edit_url:null},l={unversionedId:"api/rust/tauri/trait.ClipboardManager",id:"api/rust/tauri/trait.ClipboardManager",isDocsHomePage:!1,title:"Trait tauri::ClipboardManager",description:"`rs",source:"@site/docs/en/api/rust/tauri/trait.ClipboardManager.md",sourceDirName:"api/rust/tauri",slug:"/api/rust/tauri/trait.ClipboardManager",permalink:"/en/docs/api/rust/tauri/trait.ClipboardManager",editUrl:null,version:"current",sidebar_label:"trait.ClipboardManager",frontMatter:{title:"Trait tauri::ClipboardManager",sidebar_label:"trait.ClipboardManager",custom_edit_url:null},sidebar:"docs",previous:{title:"Trait tauri::Assets",permalink:"/en/docs/api/rust/tauri/trait.Assets"},next:{title:"Trait tauri::GlobalShortcutManager",permalink:"/en/docs/api/rust/tauri/trait.GlobalShortcutManager"}},u=[{value:"Required methods",id:"required-methods",children:[]},{value:"Panics",id:"panics",children:[]},{value:"Panics",id:"panics-1",children:[]},{value:"Implementations on Foreign Types",id:"implementations-on-foreign-types",children:[{value:"impl trait tauri::ClipboardManager for ClipboardManagerWrapper",id:"impl-trait-tauriclipboardmanager-for-clipboardmanagerwrapper",children:[]}]},{value:"Implementors",id:"implementors",children:[]}],c={toc:u};function s(t){var e=t.components,r=Object(a.a)(t,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,r,{components:e,mdxType:"MDXLayout"}),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rs"},"pub trait ClipboardManager: Debug {\n    fn write_text<T>(&mut self, text: T) -> Result<(), Error>\n\xa0\xa0\xa0 where\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0T: Into<String>;\n\n    fn read_text(&self) -> Result<Option<String>, Error>;\n}\n")),Object(i.b)("p",null,"Expand description"),Object(i.b)("p",null,"Clipboard manager."),Object(i.b)("h2",{id:"required-methods"},"Required methods"),Object(i.b)("h4",{id:"fn-write_texttmut-self-text-t---enum-coreresultresult-error-where-t-trait-coreconvertintostruct-allocstringstring"},"fn ",Object(i.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#tymethod.write_text"},"write_text"),"<","T>(&mut self, text: T) -> ",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.unit.html"},"()"),", Error> where T: ",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html",title:"struct alloc::string::String"},"String"),">,"),Object(i.b)("p",null,"Writes the text into the clipboard as plain text."),Object(i.b)("h2",{id:"panics"},"Panics"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Panics if the event loop is not running yet, usually when called on the ",Object(i.b)("inlineCode",{parentName:"li"},"tauri::Builder#setup")," closure."),Object(i.b)("li",{parentName:"ul"},"Panics when called on the main thread, usually on the ",Object(i.b)("inlineCode",{parentName:"li"},"tauri::App#run"),"closure.")),Object(i.b)("p",null,"You can spawn a task to use the API using ",Object(i.b)("inlineCode",{parentName:"p"},"tauri::async_runtime::spawn")," or ",Object(i.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html",title:"std::thread::spawn"},Object(i.b)("inlineCode",{parentName:"a"},"std::thread::spawn"))," to prevent the panic."),Object(i.b)("h4",{id:"fn-read_textself---enum-coreresultresultenum-coreoptionoptionstruct-allocstringstring-error"},"fn ",Object(i.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#tymethod.read_text"},"read_text"),"(&self) -> ",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html",title:"enum core::option::Option"},"Option"),"<",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html",title:"struct alloc::string::String"},"String"),">, Error>"),Object(i.b)("p",null,"Read the content in the clipboard as plain text."),Object(i.b)("h2",{id:"panics-1"},"Panics"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Panics if the event loop is not running yet, usually when called on the ",Object(i.b)("inlineCode",{parentName:"li"},"tauri::Builder#setup")," closure."),Object(i.b)("li",{parentName:"ul"},"Panics when called on the main thread, usually on the ",Object(i.b)("inlineCode",{parentName:"li"},"tauri::App#run"),"closure.")),Object(i.b)("p",null,"You can spawn a task to use the API using ",Object(i.b)("inlineCode",{parentName:"p"},"tauri::async_runtime::spawn")," or ",Object(i.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/std/thread/fn.spawn.html",title:"std::thread::spawn"},Object(i.b)("inlineCode",{parentName:"a"},"std::thread::spawn"))," to prevent the panic."),Object(i.b)("h2",{id:"implementations-on-foreign-types"},"Implementations on Foreign Types"),Object(i.b)("h3",{id:"impl-trait-tauriclipboardmanager-for-clipboardmanagerwrapper"},"impl ",Object(i.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/trait.ClipboardManager",title:"trait tauri::ClipboardManager"},"ClipboardManager")," for ClipboardManagerWrapper"),Object(i.b)("h4",{id:"pub-fn-read_textself---enum-coreresultresultenum-coreoptionoptionstruct-allocstringstring-error"},"pub fn ",Object(i.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#tymethod.read_text"},"read_text"),"(&self) -> ",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html",title:"enum core::option::Option"},"Option"),"<",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html",title:"struct alloc::string::String"},"String"),">, Error>"),Object(i.b)("h4",{id:"pub-fn-write_texttmut-self-text-t---enum-coreresultresult-error-where-t-trait-coreconvertintostruct-allocstringstring"},"pub fn ",Object(i.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#tymethod.write_text"},"write_text"),"<","T>(&mut self, text: T) -> ",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.unit.html"},"()"),", Error> where T: ",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<",Object(i.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html",title:"struct alloc::string::String"},"String"),">,"),Object(i.b)("h2",{id:"implementors"},"Implementors"))}s.isMDXComponent=!0},454:function(t,e,r){"use strict";r.d(e,"a",(function(){return p})),r.d(e,"b",(function(){return m}));var n=r(0),a=r.n(n);function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){i(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function u(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var c=a.a.createContext({}),s=function(t){var e=a.a.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):l(l({},e),t)),r},p=function(t){var e=s(t.components);return a.a.createElement(c.Provider,{value:e},t.children)},b={inlineCode:"code",wrapper:function(t){var e=t.children;return a.a.createElement(a.a.Fragment,{},e)}},d=a.a.forwardRef((function(t,e){var r=t.components,n=t.mdxType,i=t.originalType,o=t.parentName,c=u(t,["components","mdxType","originalType","parentName"]),p=s(r),d=n,m=p["".concat(o,".").concat(d)]||p[d]||b[d]||i;return r?a.a.createElement(m,l(l({ref:e},c),{},{components:r})):a.a.createElement(m,l({ref:e},c))}));function m(t,e){var r=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=t,l.mdxType="string"==typeof t?t:n,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);