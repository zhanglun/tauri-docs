(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{223:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return s}));var a=t(3),r=(t(0),t(454));const i={title:"Migrating from 0.x"},o={unversionedId:"usage/guides/migration",id:"usage/guides/migration",isDocsHomePage:!1,title:"Migrating from 0.x",description:"First of all if you still have tauri as dependency in your package.json",source:"@site/docs/zh-hans/usage/guides/migration.md",sourceDirName:"usage/guides",slug:"/usage/guides/migration",permalink:"/tauri-docs/docs/usage/guides/migration",editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/zh-hans/usage/guides/migration.md",version:"current",frontMatter:{title:"Migrating from 0.x"},sidebar:"docs",previous:{title:"GLUI",permalink:"/tauri-docs/docs/usage/patterns/glui"},next:{title:"Introduction",permalink:"/tauri-docs/docs/usage/guides/bundler/introduction"}},l=[{value:"Commands",id:"commands",children:[{value:"Rust",id:"rust",children:[]},{value:"JavaScript",id:"javascript",children:[]}]}],c={toc:l};function s({components:e,...n}){return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"First of all if you still have ",Object(r.b)("inlineCode",{parentName:"p"},"tauri")," as dependency in your ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),"\nreplace it with a recent version of ",Object(r.b)("inlineCode",{parentName:"p"},"@tauri-apps/cli")," (make sure to also change\nthe import path in your JavaScript/TypeScript files, see ",Object(r.b)("a",{parentName:"p",href:"#javascript"},"JavaScript"),")."),Object(r.b)("p",null,"For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-diff"},'- "tauri": "^0.14.1"\n+ "@tauri-apps/cli": "^1.0.0-beta-rc.4"\n')),Object(r.b)("p",null,"Next update your ",Object(r.b)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"add ",Object(r.b)("inlineCode",{parentName:"p"},"tauri-build")," as a new build-dependency and remove ",Object(r.b)("inlineCode",{parentName:"p"},"winres"),", e.g.:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-diff"},'+ [build-dependencies]\n+ tauri-build = { version = "1.0.0-beta-rc.0" }\n\n- [target."cfg(windows)".build-dependencies]\n- winres = "0.1"\n'))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"update the version of ",Object(r.b)("inlineCode",{parentName:"p"},"tauri")," to e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"1.0.0-beta-rc.4"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"remove all old features of the ",Object(r.b)("inlineCode",{parentName:"p"},"tauri")," dependency")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"remove all features, that tauri added and add ",Object(r.b)("inlineCode",{parentName:"p"},"custom-protocol")," as a new one:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-diff"},'[features]\n- embedded-server = [ "tauri/embedded-server" ]\n- no-server = [ "tauri/no-server" ]\n+ custom-protocol = [ "tauri/custom-protocol" ]\n+ default = [ "custom-protocol" ]\n')))),Object(r.b)("p",null,"Update your ",Object(r.b)("inlineCode",{parentName:"p"},"tauri.conf.json")," like this:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"remove ",Object(r.b)("inlineCode",{parentName:"li"},"ctx")),Object(r.b)("li",{parentName:"ul"},"remove the ",Object(r.b)("inlineCode",{parentName:"li"},"embeddedServer")),Object(r.b)("li",{parentName:"ul"},"rename ",Object(r.b)("inlineCode",{parentName:"li"},"osx")," to ",Object(r.b)("inlineCode",{parentName:"li"},"macOS")," and add some fields:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"exceptionDomain": ""')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"signingIdentity": null')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"entitlements": null')))),Object(r.b)("li",{parentName:"ul"},"remove the ",Object(r.b)("inlineCode",{parentName:"li"},"exceptionDomain")),Object(r.b)("li",{parentName:"ul"},"add a configuration for ",Object(r.b)("inlineCode",{parentName:"li"},"windows"),":",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"certificateThumbprint": null')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"digestAlgorithm": "sha256"')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"timestampUrl": ""')))),Object(r.b)("li",{parentName:"ul"},"make the ",Object(r.b)("inlineCode",{parentName:"li"},"window")," definition into an array and call it ",Object(r.b)("inlineCode",{parentName:"li"},"windows")),Object(r.b)("li",{parentName:"ul"},"remove ",Object(r.b)("inlineCode",{parentName:"li"},"inliner"))),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"for more information about the config see ",Object(r.b)("a",{parentName:"p",href:"/tauri-docs/docs/api/config"},"here"))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-diff"},'  {\n-   "ctx": {},\n    "tauri": {\n-     "embeddedServer": {\n-       "active": true\n-     },\n      "bundle": {\n-       "osx": {\n+       "macOS": {\n          "frameworks": [],\n          "minimumSystemVersion": "",\n-         "useBootstrapper": false\n+         "useBootstrapper": false,\n+         "exceptionDomain": "",\n+         "signingIdentity": null,\n+         "entitlements": null\n        },\n-       "exceptionDomain": ""\n+       "windows": {\n+         "certificateThumbprint": null,\n+         "digestAlgorithm": "sha256",\n+         "timestampUrl": ""\n+       }\n      },\n+     "updater": {\n+       "active": false\n+     },\n-     "window": {\n+     "windows": [\n        {\n          "title": "Calciumdibromid",\n          "width": 800,\n          "height": 600,\n          "resizable": true,\n          "fullscreen": false\n        }\n+     ],\n-     "inliner": {\n-       "active": true\n-     }\n    }\n  }\n')),Object(r.b)("h2",{id:"commands"},"Commands"),Object(r.b)("p",null,"The following example is taken from the previous documentation."),Object(r.b)("p",null,"In the new version of Tauri there is no distinction between synchronous and\nasynchronous commands, the only difference in your code is a call of\n",Object(r.b)("inlineCode",{parentName:"p"},"tauri::execute_promise()"),", that isn't there in a synchronous command."),Object(r.b)("h3",{id:"rust"},"Rust"),Object(r.b)("p",null,'Here is the complete example code of the "old" version:'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"use serde::{Deserialize, Serialize};\n\n#[derive(Deserialize)]\nstruct DoSomethingPayload {\n  state: String,\n  data: u64,\n}\n\n#[derive(Deserialize)]\n#[serde(tag = \"cmd\", rename_all = \"camelCase\")]\nenum Cmd {\n  DoSomething {\n    count: u64,\n    payload: DoSomethingPayload,\n    callback: String,\n    error: String,\n  },\n}\n\n#[derive(Serialize)]\nstruct Response<'a> {\n  value: u64,\n  message: &'a str,\n}\n\n#[derive(Debug, Clone)]\nstruct CommandError<'a> {\n  message: &'a str,\n}\n\nimpl<'a> CommandError<'a> {\n  fn new(message: &'a str) -> Self {\n    Self { message }\n  }\n}\n\nimpl<'a> std::fmt::Display for CommandError<'a> {\n  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n    write!(f, \"{}\", self.message)\n  }\n}\n\nimpl<'a> std::error::Error for CommandError<'a> {}\n\nfn main() {\n  tauri::AppBuilder::new()\n    .invoke_handler(|_webview, arg| {\n      use Cmd::*;\n      match serde_json::from_str(arg) {\n        Err(e) => Err(e.to_string()),\n        Ok(command) => {\n          match command {\n            DoSomething { count, payload, callback, error } => tauri::execute_promise(\n              _webview,\n              move || {\n                if count > 5 {\n                  let response = Response {\n                    value: 5,\n                    message: \"async response!\",\n                  };\n                  Ok(response)\n                } else {\n                  Err(CommandError::new(\"count should be > 5\").into())\n                }\n              },\n              callback,\n              error,\n            ),\n          }\n          Ok(())\n        }\n      }\n    })\n    .build()\n    .run();\n}\n")),Object(r.b)("p",null,"Complete the following steps to migrate your code:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"create a new function for every ",Object(r.b)("inlineCode",{parentName:"li"},"Cmd")," enum variant"),Object(r.b)("li",{parentName:"ul"},"wrap the new function with the ",Object(r.b)("inlineCode",{parentName:"li"},"#[tauri::command]")," macro"),Object(r.b)("li",{parentName:"ul"},"use the fields of the enum as arguments (",Object(r.b)("inlineCode",{parentName:"li"},"callback")," and ",Object(r.b)("inlineCode",{parentName:"li"},"error")," can be deleted)"),Object(r.b)("li",{parentName:"ul"},"as function body use the code inside the ",Object(r.b)("inlineCode",{parentName:"li"},"match")," block of the enum variant"),Object(r.b)("li",{parentName:"ul"},"add a return type"),Object(r.b)("li",{parentName:"ul"},"rename ",Object(r.b)("inlineCode",{parentName:"li"},"AppBuilder")," to ",Object(r.b)("inlineCode",{parentName:"li"},"Builder")," in ",Object(r.b)("inlineCode",{parentName:"li"},"main()")),Object(r.b)("li",{parentName:"ul"},"replace the big ",Object(r.b)("inlineCode",{parentName:"li"},"invoke_handler")," with the new syntax")),Object(r.b)("p",null,"The old example code should look like this now:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-rust"},"use serde::{Deserialize, Serialize};\n\n#[derive(Deserialize)]\nstruct DoSomethingPayload {\n  state: String,\n  data: u64,\n}\n\n#[derive(Serialize)]\nstruct Response<'a> {\n  value: u64,\n  message: &'a str,\n}\n\n#[derive(Debug, Clone, Serialize)]\nstruct CommandError<'a> {\n  message: &'a str,\n}\n\nimpl<'a> CommandError<'a> {\n  fn new(message: &'a str) -> Self {\n    Self { message }\n  }\n}\n\nimpl<'a> std::fmt::Display for CommandError<'a> {\n  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n    write!(f, \"{}\", self.message)\n  }\n}\n\nimpl<'a> std::error::Error for CommandError<'a> {}\n\n#[tauri::command]\nfn do_something(count: u64, payload: DoSomethingPayload) -> Result<Response, CommandError> {\n  if count > 5 {\n    let response = Response {\n      value: 5,\n      message: \"async response!\",\n    };\n    Ok(response)\n  } else {\n    Err(CommandError::new(\"count should be > 5\").into())\n  }\n}\n\nfn main() {\n  tauri::Builder::new()\n    .invoke_handler(tauri::generate_handler![do_something])\n    .run(tauri::generate_context!());\n}\n")),Object(r.b)("h3",{id:"javascript"},"JavaScript"),Object(r.b)("p",null,"Like mentioned above there is also no distinction between synchronous and\nasynchronous commands in JavaScript.",Object(r.b)("br",{parentName:"p"}),"\n","You only have to use ",Object(r.b)("inlineCode",{parentName:"p"},"invoke")," and optionally use the results."),Object(r.b)("p",null,'Here is an example of the "old" code:'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"invoke({\n  cmd: 'doSomething',\n  count: 5,\n  payload: {\n    state: 'some string data',\n    data: 17\n  }\n});\n\npromisified({\n  cmd: 'doSomething',\n  count: 5,\n  payload: {\n    state: 'some string data',\n    data: 17\n  }\n}).then(response => {\n  console.log(response);\n}).catch(error => {\n  console.error(error);\n});\n")),Object(r.b)("p",null,"Complete the following steps to migrate your code:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"replace all ",Object(r.b)("inlineCode",{parentName:"p"},"promisified"),"-calls with ",Object(r.b)("inlineCode",{parentName:"p"},"invoke"),"-calls")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"extract the ",Object(r.b)("inlineCode",{parentName:"p"},"cmd")," attribute of the argument object as first parameter",Object(r.b)("br",{parentName:"p"}),"\n","(you may have to rename it to ",Object(r.b)("inlineCode",{parentName:"p"},"snake_case")," as the ",Object(r.b)("inlineCode",{parentName:"p"},"cmd")," parameter is now the\nname of the function in Rust)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"if you import parts of the tauri-api with ",Object(r.b)("inlineCode",{parentName:"p"},"tauri/api/*")," replace it with ",Object(r.b)("inlineCode",{parentName:"p"},"@tauri-apps/api/*"),", e.g.:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-diff"},"- import { invoke } from 'tauri/api/tauri';\n+ import { invoke } from '@tauri-apps/api/tauri';\n")))),Object(r.b)("p",null,"The old example code should look like this now:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"invoke(\n  'do_something',\n  {\n    count: 5,\n    payload: {\n      state: 'some string data',\n      data: 17\n    }\n  }\n);\n\ninvoke(\n  'do_something',\n  {\n    count: 5,\n    payload: {\n      state: 'some string data',\n      data: 17\n    }\n  }\n).then(response => {\n  console.log(response);\n}).catch(error => {\n  console.error(error);\n});\n")),Object(r.b)("p",null,"For more information on commands read ",Object(r.b)("a",{parentName:"p",href:"/tauri-docs/docs/usage/guides/command"},"Create Rust Commands"),"."))}s.isMDXComponent=!0},454:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),m=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=m(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=m(t),b=a,d=p["".concat(o,".").concat(b)]||p[b]||u[b]||i;return t?r.a.createElement(d,l(l({ref:n},s),{},{components:t})):r.a.createElement(d,l({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=b;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);