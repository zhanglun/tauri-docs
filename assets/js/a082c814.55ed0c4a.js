/*! For license information please see a082c814.55ed0c4a.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[231],{308:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(454)),o=n(458),c={title:"Make your own CLI"},s={unversionedId:"usage/guides/cli",id:"usage/guides/cli",isDocsHomePage:!1,title:"Make your own CLI",description:"Tauri enables your app to have a CLI through clap, a robust command line argument parser. With a simple CLI definition in your tauri.conf.json file, you can define your interface and read its argument matches map on JavaScript and/or Rust.",source:"@site/docs/zh-hans/usage/guides/cli.md",sourceDirName:"usage/guides",slug:"/usage/guides/cli",permalink:"/zh-hans/docs/usage/guides/cli",editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/zh-hans/usage/guides/cli.md",version:"current",frontMatter:{title:"Make your own CLI"},sidebar:"docs",previous:{title:"How to code-sign and notorize a OSX .dmg file with GitHub Actions",permalink:"/zh-hans/docs/usage/guides/bundler/sign-osx"},next:{title:"Create Rust Commands",permalink:"/zh-hans/docs/usage/guides/command"}},l=[{value:"Base Configuration",id:"base-configuration",children:[]},{value:"Adding Arguments",id:"adding-arguments",children:[{value:"Positional Arguments",id:"positional-arguments",children:[]},{value:"Named Arguments",id:"named-arguments",children:[]},{value:"Flag Arguments",id:"flag-arguments",children:[]}]},{value:"Subcommands",id:"subcommands",children:[]},{value:"Reading the matches",id:"reading-the-matches",children:[{value:"Rust",id:"rust",children:[]},{value:"JavaScript",id:"javascript",children:[]}]},{value:"Complete documentation",id:"complete-documentation",children:[]}],u={toc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Tauri enables your app to have a CLI through ",Object(i.b)("a",{href:"https://github.com/clap-rs/clap",target:"_blank"},"clap"),", a robust command line argument parser. With a simple CLI definition in your ",Object(i.b)("inlineCode",{parentName:"p"},"tauri.conf.json")," file, you can define your interface and read its argument matches map on JavaScript and/or Rust."),Object(i.b)("h2",{id:"base-configuration"},"Base Configuration"),Object(i.b)("p",null,"Under ",Object(i.b)("inlineCode",{parentName:"p"},"tauri.conf.json"),", you have the following structure to configure the interface:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js",metastring:"title=src-tauri/tauri.conf.json",title:"src-tauri/tauri.conf.json"},'{\n  "tauri": {\n    "cli": {\n      "description": "", // command description that\'s shown on help\n      "longDescription": "", // command long description that\'s shown on help\n      "beforeHelp": "", // content to show before the help text\n      "afterHelp": "", // content to show after the help text\n      "args": [], // list of arguments of the command, we\'ll explain it later\n      "subcommands": {\n        "subcommand-name": {\n          // configures a subcommand that is accessible\n          // with `$ ./app subcommand-name --arg1 --arg2 --etc`\n          // configuration as above, with "description", "args", etc.\n        }\n      }\n    }\n  }\n}\n')),Object(i.b)(o.a,{title:"Note",mdxType:"Alert"},"All JSON configurations here are just samples, many other fields have been omitted for the sake of clarity."),Object(i.b)("h2",{id:"adding-arguments"},"Adding Arguments"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"args")," array represents the list of arguments accepted by its command or subcommand. You can find more details about the way to configure them ",Object(i.b)("a",{href:"/docs/api/config#tauri"},"here"),"."),Object(i.b)("h3",{id:"positional-arguments"},"Positional Arguments"),Object(i.b)("p",null,"A positional argument is identified by its position in the list of arguments. With the following configuration:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"title=src-tauri/tauri.conf.json:tauri.cli",title:"src-tauri/tauri.conf.json:tauri.cli"},'{\n  "args": [\n    {\n      "name": "source",\n      "index": 1\n    },\n    {\n      "name": "destination",\n      "index": 2\n    }\n  ]\n}\n')),Object(i.b)("p",null,"Users can run your app as ",Object(i.b)("inlineCode",{parentName:"p"},"$ ./app tauri.txt dest.txt")," and the arg matches map will define ",Object(i.b)("inlineCode",{parentName:"p"},"source")," as ",Object(i.b)("inlineCode",{parentName:"p"},'"tauri.txt"')," and ",Object(i.b)("inlineCode",{parentName:"p"},"destination")," as ",Object(i.b)("inlineCode",{parentName:"p"},'"dest.txt"'),"."),Object(i.b)("h3",{id:"named-arguments"},"Named Arguments"),Object(i.b)("p",null,"A named argument is a (key, value) pair where the key identifies the value. With the following configuration:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"title=src-tauri/tauri.conf.json:tauri.cli",title:"src-tauri/tauri.conf.json:tauri.cli"},'{\n  "args": [\n    {\n      "name": "type",\n      "short": "t",\n      "takesValue": true,\n      "multiple": true,\n      "possibleValues": ["foo", "bar"]\n    }\n  ]\n}\n')),Object(i.b)("p",null,"Users can run your app as ",Object(i.b)("inlineCode",{parentName:"p"},"$ ./app --type foo bar"),", ",Object(i.b)("inlineCode",{parentName:"p"},"$ ./app -t foo -t bar")," or ",Object(i.b)("inlineCode",{parentName:"p"},"$ ./app --type=foo,bar")," and the arg matches map will define ",Object(i.b)("inlineCode",{parentName:"p"},"type")," as ",Object(i.b)("inlineCode",{parentName:"p"},'["foo", "bar"]'),"."),Object(i.b)("h3",{id:"flag-arguments"},"Flag Arguments"),Object(i.b)("p",null,"A flag argument is a standalone key whose presence or absence provides information to your application. With the following configuration:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js",metastring:"title=src-tauri/tauri.conf.json:tauri.cli",title:"src-tauri/tauri.conf.json:tauri.cli"},'{\n  "args": [\n    "name": "verbose",\n    "short": "v",\n    "multipleOccurrences": true\n  ]\n}\n')),Object(i.b)("p",null,"Users can run your app as ",Object(i.b)("inlineCode",{parentName:"p"},"$ ./app -v -v -v"),", ",Object(i.b)("inlineCode",{parentName:"p"},"$ ./app --verbose --verbose --verbose")," or ",Object(i.b)("inlineCode",{parentName:"p"},"$ ./app -vvv")," and the arg matches map will define ",Object(i.b)("inlineCode",{parentName:"p"},"verbose")," as ",Object(i.b)("inlineCode",{parentName:"p"},"true"),", with ",Object(i.b)("inlineCode",{parentName:"p"},"occurrences = 3"),"."),Object(i.b)("h2",{id:"subcommands"},"Subcommands"),Object(i.b)("p",null,"Some CLI applications has additional interfaces as subcommands. For instance, the ",Object(i.b)("inlineCode",{parentName:"p"},"git")," CLI has ",Object(i.b)("inlineCode",{parentName:"p"},"git branch"),", ",Object(i.b)("inlineCode",{parentName:"p"},"git commit")," and ",Object(i.b)("inlineCode",{parentName:"p"},"git push"),". You can define additional nested interfaces with the ",Object(i.b)("inlineCode",{parentName:"p"},"subcommands")," array:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js",metastring:"title=src-tauri/tauri.conf.json:tauri",title:"src-tauri/tauri.conf.json:tauri"},'{\n  "cli": {\n    ...\n    "subcommands": {\n      "branch": {\n        "args": []\n      },\n      "push": {\n        "args": []\n      }\n    }\n  }\n}\n')),Object(i.b)("p",null,"Its configuration is the same as the root application configuration, with the ",Object(i.b)("inlineCode",{parentName:"p"},"description"),", ",Object(i.b)("inlineCode",{parentName:"p"},"longDescription"),", ",Object(i.b)("inlineCode",{parentName:"p"},"args"),", etc."),Object(i.b)("h2",{id:"reading-the-matches"},"Reading the matches"),Object(i.b)("h3",{id:"rust"},"Rust"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},'use tauri::api::cli::get_matches;\n\nfn main() {\n  let context = tauri::generate_context!();\n  let cli_config = context.config().tauri.cli.clone().unwrap();\n  \n  match get_matches(&cli_config) {\n    // `matches` here is a Struct with { args, subcommand }.\n    // `args` is `HashMap<String, ArgData>` where `ArgData` is a struct with { value, occurances }.\n    // `subcommand` is `Option<Box<SubcommandMatches>>` where `SubcommandMatches` is a struct with { name, matches }.\n    Ok(matches) => {\n      println!("{:?}", matches)\n    }\n    Err(_) => {}\n  };\n  \n  tauri::Builder::default()\n  .run(context)\n  .expect("error while running tauri application");\n}\n')),Object(i.b)("h3",{id:"javascript"},"JavaScript"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { getMatches } from '@tauri-apps/api/cli'\n\ngetMatches().then((matches) => {\n  // do something with the { args, subcommand } matches\n})\n")),Object(i.b)("h2",{id:"complete-documentation"},"Complete documentation"),Object(i.b)("p",null,"You can find more about the CLI configuration ",Object(i.b)("a",{href:"/docs/api/config#tauri"},"here"),"."))}p.isMDXComponent=!0},454:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,b=p["".concat(o,".").concat(d)]||p[d]||m[d]||i;return n?r.a.createElement(b,c(c({ref:t},l),{},{components:n})):r.a.createElement(b,c({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},455:function(e,t,n){var a;!function(){"use strict";var n={}.hasOwnProperty;function r(){for(var e=[],t=0;t<arguments.length;t++){var a=arguments[t];if(a){var i=typeof a;if("string"===i||"number"===i)e.push(a);else if(Array.isArray(a)){if(a.length){var o=r.apply(null,a);o&&e.push(o)}}else if("object"===i)if(a.toString===Object.prototype.toString)for(var c in a)n.call(a,c)&&a[c]&&e.push(c);else e.push(a.toString())}}return e.join(" ")}e.exports?(r.default=r,e.exports=r):void 0===(a=function(){return r}.apply(t,[]))||(e.exports=a)}()},456:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(455),o=n.n(i);const c={danger:"var(--ifm-color-danger)",warning:"var(--ifm-color-warning)",info:"var(--ifm-color-info)",default:"var(--ifm-font-base-color)"};t.a=({title:e,className:t,color:n="default"})=>r.a.createElement("i",{className:o()("ti-"+e,t),style:{color:c[n]}})},458:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(455),o=n.n(i),c=n(456),s=n(56),l=n.n(s);t.a=({type:e="info",title:t,icon:n,children:a})=>r.a.createElement("div",{className:o()("alert","alert--"+e,l.a.alert),style:{marginBottom:"30px"},role:"alert"},n&&r.a.createElement(r.a.Fragment,null,r.a.createElement(c.a,{title:n,className:l.a.icon}),"\xa0"),r.a.createElement("div",{className:l.a.container},t&&r.a.createElement("span",{className:l.a.title},t),r.a.createElement("div",{className:l.a.content},a)))}}]);