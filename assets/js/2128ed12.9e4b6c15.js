(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{134:function(t,r,e){"use strict";e.r(r),e.d(r,"frontMatter",(function(){return s})),e.d(r,"metadata",(function(){return i})),e.d(r,"toc",(function(){return n})),e.d(r,"default",(function(){return l}));var o=e(3),a=e(7),c=(e(0),e(454)),s={title:"Struct tauri::http::Uri",sidebar_label:"struct.Uri",custom_edit_url:null},i={unversionedId:"api/rust/tauri/http/struct.Uri",id:"api/rust/tauri/http/struct.Uri",isDocsHomePage:!1,title:"Struct tauri::http::Uri",description:"x3A;:Uri,",source:"@site/docs/zh-hans/api/rust/tauri/http/struct.Uri.md",sourceDirName:"api/rust/tauri/http",slug:"/api/rust/tauri/http/struct.Uri",permalink:"/tauri-docs/docs/api/rust/tauri/http/struct.Uri",editUrl:null,version:"current",sidebar_label:"struct.Uri",frontMatter:{title:"Struct tauri::http::Uri",sidebar_label:"struct.Uri",custom_edit_url:null},sidebar:"docs",previous:{title:"Struct tauri::http::ResponseParts",permalink:"/tauri-docs/docs/api/rust/tauri/http/struct.ResponseParts"},next:{title:"Trait tauri::plugin::Plugin",permalink:"/tauri-docs/docs/api/rust/tauri/plugin/trait.Plugin"}},n=[{value:"Examples",id:"examples",children:[]},{value:"Implementations",id:"implementations",children:[{value:"impl struct tauri::http::Urigoto source code",id:"impl-struct-taurihttpurigoto-source-code",children:[]}]},{value:"Examples",id:"examples-1",children:[]},{value:"Panics",id:"panics",children:[]},{value:"Examples",id:"examples-2",children:[]},{value:"Note",id:"note",children:[]},{value:"Examples",id:"examples-3",children:[]},{value:"Examples",id:"examples-4",children:[]},{value:"Examples",id:"examples-5",children:[]},{value:"Example",id:"example",children:[]},{value:"Examples",id:"examples-6",children:[]},{value:"Examples",id:"examples-7",children:[]},{value:"Examples",id:"examples-8",children:[]},{value:"Example",id:"example-1",children:[]},{value:"Examples",id:"examples-9",children:[]},{value:"Trait Implementations",id:"trait-implementations",children:[{value:"impl trait core::clone::Clone for struct tauri::http::Urigoto source code",id:"impl-trait-corecloneclone-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl trait core::fmt::Debug for struct tauri::http::Urigoto source code",id:"impl-trait-corefmtdebug-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl trait core::default::Default for struct tauri::http::Urigoto source code",id:"impl-trait-coredefaultdefault-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl trait core::fmt::Display for struct tauri::http::Urigoto source code",id:"impl-trait-corefmtdisplay-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl trait core::str::traits::FromStr for struct tauri::http::Urigoto source code",id:"impl-trait-corestrtraitsfromstr-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl trait core::hash::Hash for struct tauri::http::Urigoto source code",id:"impl-trait-corehashhash-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl&lt;&#39;a&gt; trait core::cmp::PartialEq&lt;&lt;&#39;a str&gt; for struct tauri::http::Urigoto source code",id:"impla-trait-corecmppartialeqa-str-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl trait core::cmp::PartialEq&lt;struct tauri::http::Uri&gt; for struct tauri::http::Urigoto source code",id:"impl-trait-corecmppartialeqstruct-taurihttpuri-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl trait core::cmp::PartialEq&lt;str&gt; for struct tauri::http::Urigoto source code",id:"impl-trait-corecmppartialeqstr-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl&lt;&#39;a&gt; trait core::convert::TryFrom&lt;&'a [u8]&gt; for struct tauri::http::Urigoto source code",id:"impla-trait-coreconverttryfroma-u8-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl&lt;&#39;a&gt; trait core::convert::TryFrom&lt;&lt;&#39;a struct alloc::string::String&gt; for struct tauri::http::Urigoto source code",id:"impla-trait-coreconverttryfroma-struct-allocstringstring-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl&lt;&#39;a&gt; trait core::convert::TryFrom&lt;&lt;&#39;a struct tauri::http::Uri&gt; for struct tauri::http::Urigoto source code",id:"impla-trait-coreconverttryfroma-struct-taurihttpuri-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl&lt;&#39;a&gt; trait core::convert::TryFrom&lt;&lt;&#39;a str&gt; for struct tauri::http::Urigoto source code",id:"impla-trait-coreconverttryfroma-str-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl trait core::convert::TryFrom&lt;struct http::uri::Parts&gt; for struct tauri::http::Urigoto source code",id:"impl-trait-coreconverttryfromstruct-httpuriparts-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl trait core::convert::TryFrom&lt;struct alloc::string::String&gt; for struct tauri::http::Urigoto source code",id:"impl-trait-coreconverttryfromstruct-allocstringstring-for-struct-taurihttpurigoto-source-code",children:[]},{value:"impl trait core::cmp::Eq for struct tauri::http::Uri",id:"impl-trait-corecmpeq-for-struct-taurihttpuri",children:[]}]},{value:"Auto Trait Implementations",id:"auto-trait-implementations",children:[{value:"impl trait std::panic::RefUnwindSafe for struct tauri::http::Uri",id:"impl-trait-stdpanicrefunwindsafe-for-struct-taurihttpuri",children:[]},{value:"impl trait core::marker::Send for struct tauri::http::Uri",id:"impl-trait-coremarkersend-for-struct-taurihttpuri",children:[]},{value:"impl trait core::marker::Sync for struct tauri::http::Uri",id:"impl-trait-coremarkersync-for-struct-taurihttpuri",children:[]},{value:"impl trait core::marker::Unpin for struct tauri::http::Uri",id:"impl-trait-coremarkerunpin-for-struct-taurihttpuri",children:[]},{value:"impl trait std::panic::UnwindSafe for struct tauri::http::Uri",id:"impl-trait-stdpanicunwindsafe-for-struct-taurihttpuri",children:[]}]},{value:"Blanket Implementations",id:"blanket-implementations",children:[{value:"impl&lt;T&gt; trait core::any::Any for T where T: &#39;static + ?trait core::marker::Sized,goto source code",id:"implt-trait-coreanyany-for-t-where-t-static--trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait core::borrow::Borrow&lt;T&gt; for T where T: ?trait core::marker::Sized,goto source code",id:"implt-trait-coreborrowborrowt-for-t-where-t-trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait core::borrow::BorrowMut&lt;T&gt; for T where T: ?trait core::marker::Sized,goto source code",id:"implt-trait-coreborrowborrowmutt-for-t-where-t-trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait core::convert::From&lt;T&gt; for Tgoto source code",id:"implt-trait-coreconvertfromt-for-tgoto-source-code",children:[]},{value:"impl&lt;T, U&gt; trait core::convert::Into&lt;U&gt; for T where U: trait core::convert::From&lt;T&gt;,goto source code",id:"implt-u-trait-coreconvertintou-for-t-where-u-trait-coreconvertfromtgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait alloc::borrow::ToOwned for T where T: trait core::clone::Clone,goto source code",id:"implt-trait-allocborrowtoowned-for-t-where-t-trait-corecloneclonegoto-source-code",children:[]},{value:"impl&lt;T&gt; trait alloc::string::ToString for T where T: trait core::fmt::Display + ?trait core::marker::Sized,goto source code",id:"implt-trait-allocstringtostring-for-t-where-t-trait-corefmtdisplay--trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T, U&gt; trait core::convert::TryFrom&lt;U&gt; for T where U: trait core::convert::Into&lt;T&gt;,goto source code",id:"implt-u-trait-coreconverttryfromu-for-t-where-u-trait-coreconvertintotgoto-source-code",children:[]},{value:"impl&lt;T, U&gt; trait core::convert::TryInto&lt;U&gt; for T where U: trait core::convert::TryFrom&lt;T&gt;,goto source code",id:"implt-u-trait-coreconverttryintou-for-t-where-u-trait-coreconverttryfromtgoto-source-code",children:[]},{value:"impl&lt;V, T&gt; VZip&lt;V&gt; for T where V: MultiLane&lt;T&gt;,",id:"implv-t-vzipv-for-t-where-v-multilanet",children:[]}]}],h={toc:n};function l(t){var r=t.components,e=Object(a.a)(t,["components"]);return Object(c.b)("wrapper",Object(o.a)({},h,e,{components:r,mdxType:"MDXLayout"}),Object(c.b)("p",null,"x3A;:Uri,"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},"pub struct Uri { /* fields omitted */ }\n")),Object(c.b)("p",null,"Expand description"),Object(c.b)("p",null,"The URI component of a request."),Object(c.b)("p",null,"For HTTP 1, this is included as part of the request line. From Section 5.3, Request Target:"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Once an inbound connection is obtained, the client sends an HTTP request message (Section 3) with a request-target derived from the target URI. There are four distinct formats for the request-target, depending on both the method being requested and whether the request is to a proxy."),Object(c.b)("pre",{parentName:"blockquote"},Object(c.b)("code",{parentName:"pre",className:"language-notrust"},"```rs\nrequest-target = origin-form\n               / absolute-form\n               / authority-form\n               / asterisk-form\n\n```\n"))),Object(c.b)("p",null,"The URI is structured as follows:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-notrust"},"```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n|-|   |-------------------------------||--------| |-------------------| |-----|\n |                  |                       |               |              |\nscheme          authority                 path            query         fragment\n\n```\n")),Object(c.b)("p",null,"For HTTP 2.0, the URI is encoded using pseudoheaders."),Object(c.b)("h2",{id:"examples"},"Examples"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'use http::Uri;\n\nlet uri = "/foo/bar?baz".parse::<Uri>().unwrap();\nassert_eq!(uri.path(), "/foo/bar");\nassert_eq!(uri.query(), Some("baz"));\nassert_eq!(uri.host(), None);\n\nlet uri = "https://www.rust-lang.org/install.html".parse::<Uri>().unwrap();\nassert_eq!(uri.scheme_str(), Some("https"));\nassert_eq!(uri.host(), Some("www.rust-lang.org"));\nassert_eq!(uri.path(), "/install.html");\n')),Object(c.b)("h2",{id:"implementations"},"Implementations"),Object(c.b)("h3",{id:"impl-struct-taurihttpurigoto-source-code"},"impl ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#182-676",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-builder---struct-httpuribuilderbuildergoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.builder"},"builder"),"() -> ",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/http/uri/builder/struct.Builder.html",title:"struct http::uri::builder::Builder"},"Builder"),Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#200",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Creates a new builder-style object to manufacture a ",Object(c.b)("inlineCode",{parentName:"p"},"Uri"),"."),Object(c.b)("p",null,"This method returns an instance of ",Object(c.b)("inlineCode",{parentName:"p"},"Builder")," which can be usd to create a ",Object(c.b)("inlineCode",{parentName:"p"},"Uri"),"."),Object(c.b)("h2",{id:"examples-1"},"Examples"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'use http::Uri;\n\nlet uri = Uri::builder()\n    .scheme("https")\n    .authority("hyper.rs")\n    .path_and_query("/")\n    .build()\n    .unwrap();\n')),Object(c.b)("h4",{id:"pub-fn-from_partssrc-struct-httpuriparts---enum-coreresultresultstruct-taurihttpuri-struct-httpuriinvaliduripartsgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.from_parts"},"from_parts"),"(src: ",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/http/uri/struct.Parts.html",title:"struct http::uri::Parts"},"Parts"),") -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),", ",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/http/uri/struct.InvalidUriParts.html",title:"struct http::uri::InvalidUriParts"},"InvalidUriParts"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#205",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Attempt to convert a ",Object(c.b)("inlineCode",{parentName:"p"},"Uri")," from ",Object(c.b)("inlineCode",{parentName:"p"},"Parts")),Object(c.b)("h4",{id:"pub-fn-from_maybe_sharedtsrc-t---enum-coreresultresultstruct-taurihttpuri-struct-taurihttpinvaliduri-where-t-trait-coreconvertasrefu8--staticgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.from_maybe_shared"},"from_maybe_shared"),"<","T>(src: T) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),", ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.InvalidUri",title:"struct tauri::http::InvalidUri"},"InvalidUri"),"> where T: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.AsRef.html",title:"trait core::convert::AsRef"},"AsRef"),"<",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.slice.html"},"["),Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.u8.html"},"u8"),Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.slice.html"},"]"),"> + 'static,",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#248-250",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Attempt to convert a ",Object(c.b)("inlineCode",{parentName:"p"},"Bytes")," buffer to a ",Object(c.b)("inlineCode",{parentName:"p"},"Uri"),"."),Object(c.b)("p",null,"This will try to prevent a copy if the type passed is the type used internally, and will copy the data if it is not."),Object(c.b)("h4",{id:"pub-fn-from_staticsrc-static-str---struct-taurihttpurigoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.from_static"},"from_static"),"(src: &'static ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),") -> ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#328",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Convert a ",Object(c.b)("inlineCode",{parentName:"p"},"Uri")," from a static string."),Object(c.b)("p",null,"This function will not perform any copying, however the string is checked to ensure that it is valid."),Object(c.b)("h2",{id:"panics"},"Panics"),Object(c.b)("p",null,"This function panics if the argument is an invalid URI."),Object(c.b)("h2",{id:"examples-2"},"Examples"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri = Uri::from_static("http://example.com/foo");\n\nassert_eq!(uri.host().unwrap(), "example.com");\nassert_eq!(uri.path(), "/foo");\n')),Object(c.b)("h4",{id:"pub-fn-into_partsself---struct-httpuripartsgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.into_parts"},"into_parts"),"(self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/http/uri/struct.Parts.html",title:"struct http::uri::Parts"},"Parts"),Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#357",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Convert a ",Object(c.b)("inlineCode",{parentName:"p"},"Uri")," into ",Object(c.b)("inlineCode",{parentName:"p"},"Parts"),"."),Object(c.b)("h2",{id:"note"},"Note"),Object(c.b)("p",null,"This is just an inherent method providing the same functionality as ",Object(c.b)("inlineCode",{parentName:"p"},"let parts: Parts = uri.into()")),Object(c.b)("h2",{id:"examples-3"},"Examples"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "/foo".parse().unwrap();\n\nlet parts = uri.into_parts();\n\nassert_eq!(parts.path_and_query.unwrap(), "/foo");\n\nassert!(parts.scheme.is_none());\nassert!(parts.authority.is_none());\n')),Object(c.b)("h4",{id:"pub-fn-path_and_queryself---enum-coreoptionoptionstruct-httpuripathpathandquerygoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.path_and_query"},"path_and_query"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html",title:"enum core::option::Option"},"Option"),"<","&",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/http/uri/path/struct.PathAndQuery.html",title:"struct http::uri::path::PathAndQuery"},"PathAndQuery"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#363",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Returns the path & query components of the Uri"),Object(c.b)("h4",{id:"pub-fn-pathself---strgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.path"},"path"),"(&self) -> &",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#406",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Get the path of this ",Object(c.b)("inlineCode",{parentName:"p"},"Uri"),"."),Object(c.b)("p",null,"Both relative and absolute URIs contain a path component, though it might be the empty string. The path component is ",Object(c.b)("strong",{parentName:"p"},"case sensitive"),"."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-notrust"},"```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n                                   |--------|\n                                        |\n                                      path\n\n```\n")),Object(c.b)("p",null,"If the URI is ",Object(c.b)("inlineCode",{parentName:"p"},"*")," then the path component is equal to ",Object(c.b)("inlineCode",{parentName:"p"},"*"),"."),Object(c.b)("h2",{id:"examples-4"},"Examples"),Object(c.b)("p",null,"A relative URI"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "/hello/world".parse().unwrap();\n\nassert_eq!(uri.path(), "/hello/world");\n')),Object(c.b)("p",null,"An absolute URI"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "http://example.org/hello/world".parse().unwrap();\n\nassert_eq!(uri.path(), "/hello/world");\n')),Object(c.b)("h4",{id:"pub-fn-schemeself---enum-coreoptionoptionstruct-httpurischemeschemegoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.scheme"},"scheme"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html",title:"enum core::option::Option"},"Option"),"<","&",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/http/uri/scheme/struct.Scheme.html",title:"struct http::uri::scheme::Scheme"},"Scheme"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#450",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Get the scheme of this ",Object(c.b)("inlineCode",{parentName:"p"},"Uri"),"."),Object(c.b)("p",null,"The URI scheme refers to a specification for assigning identifiers within that scheme. Only absolute URIs contain a scheme component, but not all absolute URIs will contain a scheme component. Although scheme names are case-insensitive, the canonical form is lowercase."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-notrust"},"```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n|-|\n |\nscheme\n\n```\n")),Object(c.b)("h2",{id:"examples-5"},"Examples"),Object(c.b)("p",null,"Absolute URI"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'use http::uri::{Scheme, Uri};\n\nlet uri: Uri = "http://example.org/hello/world".parse().unwrap();\n\nassert_eq!(uri.scheme(), Some(&Scheme::HTTP));\n')),Object(c.b)("p",null,"Relative URI"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "/hello/world".parse().unwrap();\n\nassert!(uri.scheme().is_none());\n')),Object(c.b)("h4",{id:"pub-fn-scheme_strself---enum-coreoptionoptionstrgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.scheme_str"},"scheme_str"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html",title:"enum core::option::Option"},"Option"),"<","&",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#469",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Get the scheme of this ",Object(c.b)("inlineCode",{parentName:"p"},"Uri")," as a ",Object(c.b)("inlineCode",{parentName:"p"},"&str"),"."),Object(c.b)("h2",{id:"example"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "http://example.org/hello/world".parse().unwrap();\n\nassert_eq!(uri.scheme_str(), Some("http"));\n')),Object(c.b)("h4",{id:"pub-fn-authorityself---enum-coreoptionoptionstruct-httpuriauthorityauthoritygoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.authority"},"authority"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html",title:"enum core::option::Option"},"Option"),"<","&",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/http/uri/authority/struct.Authority.html",title:"struct http::uri::authority::Authority"},"Authority"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#517",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Get the authority of this ",Object(c.b)("inlineCode",{parentName:"p"},"Uri"),"."),Object(c.b)("p",null,"The authority is a hierarchical element for naming authority such that the remainder of the URI is delegated to that authority. For HTTP, the authority consists of the host and port. The host portion of the authority is ",Object(c.b)("strong",{parentName:"p"},"case-insensitive"),"."),Object(c.b)("p",null,"The authority also includes a ",Object(c.b)("inlineCode",{parentName:"p"},"username:password")," component, however the use of this is deprecated and should be avoided."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-notrust"},"```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n  |-------------------------------|\n                |\n            authority\n\n```\n")),Object(c.b)("p",null,"This function will be renamed to ",Object(c.b)("inlineCode",{parentName:"p"},"authority")," in the next semver release."),Object(c.b)("h2",{id:"examples-6"},"Examples"),Object(c.b)("p",null,"Absolute URI"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "http://example.org:80/hello/world".parse().unwrap();\n\nassert_eq!(uri.authority().map(|a| a.as_str()), Some("example.org:80"));\n')),Object(c.b)("p",null,"Relative URI"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "/hello/world".parse().unwrap();\n\nassert!(uri.authority().is_none());\n')),Object(c.b)("h4",{id:"pub-fn-hostself---enum-coreoptionoptionstrgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.host"},"host"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html",title:"enum core::option::Option"},"Option"),"<","&",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#559",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Get the host of this ",Object(c.b)("inlineCode",{parentName:"p"},"Uri"),"."),Object(c.b)("p",null,"The host subcomponent of authority is identified by an IP literal encapsulated within square brackets, an IPv4 address in dotted- decimal form, or a registered name. The host subcomponent is ",Object(c.b)("strong",{parentName:"p"},"case-insensitive"),"."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-notrust"},"```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n                    |---------|\n                         |\n                        host\n\n```\n")),Object(c.b)("h2",{id:"examples-7"},"Examples"),Object(c.b)("p",null,"Absolute URI"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "http://example.org:80/hello/world".parse().unwrap();\n\nassert_eq!(uri.host(), Some("example.org"));\n')),Object(c.b)("p",null,"Relative URI"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "/hello/world".parse().unwrap();\n\nassert!(uri.host().is_none());\n')),Object(c.b)("h4",{id:"pub-fn-portself---enum-coreoptionoptionstruct-httpuriportportstrgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.port"},"port"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html",title:"enum core::option::Option"},"Option"),"<",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/http/uri/port/struct.Port.html",title:"struct http::uri::port::Port"},"Port"),"<","&",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),">>",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#606",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Get the port part of this ",Object(c.b)("inlineCode",{parentName:"p"},"Uri"),"."),Object(c.b)("p",null,"The port subcomponent of authority is designated by an optional port number following the host and delimited from it by a single colon (\u201c:\u201d) character. It can be turned into a decimal port number with the ",Object(c.b)("inlineCode",{parentName:"p"},"as_u16")," method or as a ",Object(c.b)("inlineCode",{parentName:"p"},"str")," with the ",Object(c.b)("inlineCode",{parentName:"p"},"as_str")," method."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-notrust"},"```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n                                |-|\n                                 |\n                                port\n\n```\n")),Object(c.b)("h2",{id:"examples-8"},"Examples"),Object(c.b)("p",null,"Absolute URI with port"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "http://example.org:80/hello/world".parse().unwrap();\n\nlet port = uri.port().unwrap();\nassert_eq!(port.as_u16(), 80);\n')),Object(c.b)("p",null,"Absolute URI without port"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "http://example.org/hello/world".parse().unwrap();\n\nassert!(uri.port().is_none());\n')),Object(c.b)("p",null,"Relative URI"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "/hello/world".parse().unwrap();\n\nassert!(uri.port().is_none());\n')),Object(c.b)("h4",{id:"pub-fn-port_u16self---enum-coreoptionoptionu16goto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.port_u16"},"port_u16"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html",title:"enum core::option::Option"},"Option"),"<",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.u16.html"},"u16"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#621",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Get the port of this ",Object(c.b)("inlineCode",{parentName:"p"},"Uri")," as a ",Object(c.b)("inlineCode",{parentName:"p"},"u16"),"."),Object(c.b)("h2",{id:"example-1"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "http://example.org:80/hello/world".parse().unwrap();\n\nassert_eq!(uri.port_u16(), Some(80));\n')),Object(c.b)("h4",{id:"pub-fn-queryself---enum-coreoptionoptionstrgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.query"},"query"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html",title:"enum core::option::Option"},"Option"),"<","&",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#669",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Get the query string of this ",Object(c.b)("inlineCode",{parentName:"p"},"Uri"),", starting after the ",Object(c.b)("inlineCode",{parentName:"p"},"?"),"."),Object(c.b)("p",null,"The query component contains non-hierarchical data that, along with data in the path component, serves to identify a resource within the scope of the URI\u2019s scheme and naming authority (if any). The query component is indicated by the first question mark (\u201c?\u201d) character and terminated by a number sign (\u201c#\u201d) character or by the end of the URI."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-notrust"},"```rs\nabc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n                                              |-------------------|\n                                                        |\n                                                      query\n\n```\n")),Object(c.b)("h2",{id:"examples-9"},"Examples"),Object(c.b)("p",null,"Absolute URI"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "http://example.org/hello/world?key=value".parse().unwrap();\n\nassert_eq!(uri.query(), Some("key=value"));\n')),Object(c.b)("p",null,"Relative URI with a query string component"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "/hello/world?key=value&foo=bar".parse().unwrap();\n\nassert_eq!(uri.query(), Some("key=value&foo=bar"));\n')),Object(c.b)("p",null,"Relative URI without a query string component"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'let uri: Uri = "/hello/world".parse().unwrap();\n\nassert!(uri.query().is_none());\n')),Object(c.b)("h2",{id:"trait-implementations"},"Trait Implementations"),Object(c.b)("h3",{id:"impl-trait-corecloneclone-for-struct-taurihttpurigoto-source-code"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html",title:"trait core::clone::Clone"},"Clone")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#95",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-cloneself---struct-taurihttpurigoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone"},"clone"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#95",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Returns a copy of the value. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#tymethod.clone"},"Read more")),Object(c.b)("h4",{id:"fn-clone_frommut-self-source-self100goto-source-code"},"fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from"},"clone_from"),"(&mut self, source: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&"),"Self)1.0.0",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/clone.rs.html#130",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs copy-assignment from ",Object(c.b)("inlineCode",{parentName:"p"},"source"),". ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html#method.clone_from"},"Read more")),Object(c.b)("h3",{id:"impl-trait-corefmtdebug-for-struct-taurihttpurigoto-source-code"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html",title:"trait core::fmt::Debug"},"Debug")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1016-1020",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-fmtself-f-mut-struct-corefmtformatter_---enum-coreresultresult-struct-corefmterrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt"},"fmt"),"(&self, f: &mut ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html",title:"struct core::fmt::Formatter"},"Formatter"),"<","'","_",">) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.unit.html"},"()"),", ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html",title:"struct core::fmt::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1017",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Formats the value using the given formatter. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt"},"Read more")),Object(c.b)("h3",{id:"impl-trait-coredefaultdefault-for-struct-taurihttpurigoto-source-code"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html",title:"trait core::default::Default"},"Default")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#985-994",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Returns a ",Object(c.b)("inlineCode",{parentName:"p"},"Uri")," representing ",Object(c.b)("inlineCode",{parentName:"p"},"/")),Object(c.b)("h4",{id:"pub-fn-default---struct-taurihttpurigoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default"},"default"),"() -> ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#987",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Returns the \u201cdefault value\u201d for a type. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/default/trait.Default.html#tymethod.default"},"Read more")),Object(c.b)("h3",{id:"impl-trait-corefmtdisplay-for-struct-taurihttpurigoto-source-code"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html",title:"trait core::fmt::Display"},"Display")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#996-1014",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-fmtself-f-mut-struct-corefmtformatter_---enum-coreresultresult-struct-corefmterrorgoto-source-code-1"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt"},"fmt"),"(&self, f: &mut ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html",title:"struct core::fmt::Formatter"},"Formatter"),"<","'","_",">) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.unit.html"},"()"),", ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html",title:"struct core::fmt::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#997",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Formats the value using the given formatter. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html#tymethod.fmt"},"Read more")),Object(c.b)("h3",{id:"impl-trait-corestrtraitsfromstr-for-struct-taurihttpurigoto-source-code"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html",title:"trait core::str::traits::FromStr"},"FromStr")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#854-861",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-err--struct-taurihttpinvaliduri"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#associatedtype.Err"},"Err")," = ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.InvalidUri",title:"struct tauri::http::InvalidUri"},"InvalidUri")),Object(c.b)("p",null,"The associated error which can be returned from parsing."),Object(c.b)("h4",{id:"pub-fn-from_strs-str---enum-coreresultresultstruct-taurihttpuri-struct-taurihttpinvalidurigoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#tymethod.from_str"},"from_str"),"(s: &",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),") -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),", ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.InvalidUri",title:"struct tauri::http::InvalidUri"},"InvalidUri"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#858",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Parses a string ",Object(c.b)("inlineCode",{parentName:"p"},"s")," to return a value of this type. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/str/traits/trait.FromStr.html#tymethod.from_str"},"Read more")),Object(c.b)("h3",{id:"impl-trait-corehashhash-for-struct-taurihttpurigoto-source-code"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html",title:"trait core::hash::Hash"},"Hash")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1068-1089",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-hashhself-state-muth-where-h-trait-corehashhashergoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash"},"hash"),"<","H>(&self, state: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&mut"),"H) where H: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html",title:"trait core::hash::Hasher"},"Hasher"),",",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#1069-1071",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Feeds this value into the given ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html",title:"Hasher"},Object(c.b)("inlineCode",{parentName:"a"},"Hasher")),". ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#tymethod.hash"},"Read more")),Object(c.b)("h4",{id:"fn-hash_slicehdata-self-state-muth-where-h-trait-corehashhasher130goto-source-code"},"fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice"},"hash_slice"),"<","H>(data: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.slice.html"},"&","[","Self","]"),", state: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&mut"),"H) where H: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html",title:"trait core::hash::Hasher"},"Hasher"),",1.3.0",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/hash/mod.rs.html#211-213",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Feeds a slice of this type into the given ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/hash/trait.Hasher.html",title:"Hasher"},Object(c.b)("inlineCode",{parentName:"a"},"Hasher")),". ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/hash/trait.Hash.html#method.hash_slice"},"Read more")),Object(c.b)("h3",{id:"impla-trait-corecmppartialeqa-str-for-struct-taurihttpurigoto-source-code"},"impl","<","'a> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html",title:"trait core::cmp::PartialEq"},"PartialEq"),"<","<'a ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),"> for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#970-974",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-eqself-other-a-str---boolgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq"},"eq"),"(&self, other: &&'a ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),") -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.bool.html"},"bool"),Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#971",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"This method tests for ",Object(c.b)("inlineCode",{parentName:"p"},"self")," and ",Object(c.b)("inlineCode",{parentName:"p"},"other")," values to be equal, and is used by ",Object(c.b)("inlineCode",{parentName:"p"},"=="),". ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq"},"Read more")),Object(c.b)("h4",{id:"must_usefn-neself-other-rhs---bool100goto-source-code"},"#","[","must_use]fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne"},"ne"),"(&self, other: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&"),"Rhs) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.bool.html"},"bool"),"1.0.0",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"This method tests for ",Object(c.b)("inlineCode",{parentName:"p"},"!="),"."),Object(c.b)("h3",{id:"impl-trait-corecmppartialeqstruct-taurihttpuri-for-struct-taurihttpurigoto-source-code"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html",title:"trait core::cmp::PartialEq"},"PartialEq"),"<",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),"> for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#863-883",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-eqself-other-struct-taurihttpuri---boolgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq"},"eq"),"(&self, other: &",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),") -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.bool.html"},"bool"),Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#864",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"This method tests for ",Object(c.b)("inlineCode",{parentName:"p"},"self")," and ",Object(c.b)("inlineCode",{parentName:"p"},"other")," values to be equal, and is used by ",Object(c.b)("inlineCode",{parentName:"p"},"=="),". ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq"},"Read more")),Object(c.b)("h4",{id:"must_usefn-neself-other-rhs---bool100goto-source-code-1"},"#","[","must_use]fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne"},"ne"),"(&self, other: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&"),"Rhs) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.bool.html"},"bool"),"1.0.0",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"This method tests for ",Object(c.b)("inlineCode",{parentName:"p"},"!="),"."),Object(c.b)("h3",{id:"impl-trait-corecmppartialeqstr-for-struct-taurihttpurigoto-source-code"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html",title:"trait core::cmp::PartialEq"},"PartialEq"),"<",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),"> for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#885-962",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-eqself-other-str---boolgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq"},"eq"),"(&self, other: &",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),") -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.bool.html"},"bool"),Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#886",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"This method tests for ",Object(c.b)("inlineCode",{parentName:"p"},"self")," and ",Object(c.b)("inlineCode",{parentName:"p"},"other")," values to be equal, and is used by ",Object(c.b)("inlineCode",{parentName:"p"},"=="),". ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#tymethod.eq"},"Read more")),Object(c.b)("h4",{id:"must_usefn-neself-other-rhs---bool100goto-source-code-2"},"#","[","must_use]fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.PartialEq.html#method.ne"},"ne"),"(&self, other: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&"),"Rhs) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.bool.html"},"bool"),"1.0.0",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/cmp.rs.html#213",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"This method tests for ",Object(c.b)("inlineCode",{parentName:"p"},"!="),"."),Object(c.b)("h3",{id:"impla-trait-coreconverttryfroma-u8-for-struct-taurihttpurigoto-source-code"},"impl","<","'a> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/primitive.slice.html"},"&'a ","["),Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/primitive.u8.html"},"u8"),Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/primitive.slice.html"},"]"),"> for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#678-685",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-error--struct-taurihttpinvaliduri"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error"},"Error")," = ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.InvalidUri",title:"struct tauri::http::InvalidUri"},"InvalidUri")),Object(c.b)("p",null,"The type returned in the event of a conversion error."),Object(c.b)("h4",{id:"pub-fn-try_fromt-a-u8---enum-coreresultresultstruct-taurihttpuri-struct-taurihttpuri-as-trait-coreconverttryfroma-u8type-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from"},"try_from"),"(t: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.slice.html"},"&'a ","["),Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.u8.html"},"u8"),Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.slice.html"},"]"),") -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),", ","<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri")," as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.slice.html"},"&'a ","["),Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.u8.html"},"u8"),Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.slice.html"},"]"),">>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#682",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"impla-trait-coreconverttryfroma-struct-allocstringstring-for-struct-taurihttpurigoto-source-code"},"impl","<","'a> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","<'a ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html",title:"struct alloc::string::String"},"String"),"> for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#696-703",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-error--struct-taurihttpinvaliduri-1"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error"},"Error")," = ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.InvalidUri",title:"struct tauri::http::InvalidUri"},"InvalidUri")),Object(c.b)("p",null,"The type returned in the event of a conversion error."),Object(c.b)("h4",{id:"pub-fn-try_from-t-a-struct-allocstringstring----enum-coreresultresultstruct-taurihttpuri-struct-taurihttpuri-as-trait-coreconverttryfroma-struct-allocstringstringtype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from"},"try_from"),"( t: &'a ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html",title:"struct alloc::string::String"},"String")," ) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),", ","<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri")," as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","<'a ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html",title:"struct alloc::string::String"},"String"),">>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#700",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"impla-trait-coreconverttryfroma-struct-taurihttpuri-for-struct-taurihttpurigoto-source-code"},"impl","<","'a> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","<'a ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),"> for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#723-730",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-error--struct-httperrorerror"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error"},"Error")," = ",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/http/error/struct.Error.html",title:"struct http::error::Error"},"Error")),Object(c.b)("p",null,"The type returned in the event of a conversion error."),Object(c.b)("h4",{id:"pub-fn-try_fromsrc-a-struct-taurihttpuri---enum-coreresultresultstruct-taurihttpuri-struct-taurihttpuri-as-trait-coreconverttryfroma-struct-taurihttpuritype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from"},"try_from"),"(src: &'a ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),") -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),", ","<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri")," as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","<'a ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),">>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#727",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"impla-trait-coreconverttryfroma-str-for-struct-taurihttpurigoto-source-code"},"impl","<","'a> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","<'a ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),"> for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#687-694",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-error--struct-taurihttpinvaliduri-2"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error"},"Error")," = ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.InvalidUri",title:"struct tauri::http::InvalidUri"},"InvalidUri")),Object(c.b)("p",null,"The type returned in the event of a conversion error."),Object(c.b)("h4",{id:"pub-fn-try_fromt-a-str---enum-coreresultresultstruct-taurihttpuri-struct-taurihttpuri-as-trait-coreconverttryfroma-strtype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from"},"try_from"),"(t: &'a ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),") -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),", ","<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri")," as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","<'a ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.str.html"},"str"),">>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#691",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"impl-trait-coreconverttryfromstruct-httpuriparts-for-struct-taurihttpurigoto-source-code"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<",Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/http/uri/struct.Parts.html",title:"struct http::uri::Parts"},"Parts"),"> for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#714-721",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-error--struct-httpuriinvaliduriparts"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error"},"Error")," = ",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/http/uri/struct.InvalidUriParts.html",title:"struct http::uri::InvalidUriParts"},"InvalidUriParts")),Object(c.b)("p",null,"The type returned in the event of a conversion error."),Object(c.b)("h4",{id:"pub-fn-try_fromsrc-struct-httpuriparts---enum-coreresultresultstruct-taurihttpuri-struct-taurihttpuri-as-trait-coreconverttryfromstruct-httpuripartstype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from"},"try_from"),"(src: ",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/http/uri/struct.Parts.html",title:"struct http::uri::Parts"},"Parts"),") -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),", ","<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri")," as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/http/uri/struct.Parts.html",title:"struct http::uri::Parts"},"Parts"),">>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#718",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"impl-trait-coreconverttryfromstruct-allocstringstring-for-struct-taurihttpurigoto-source-code"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html",title:"struct alloc::string::String"},"String"),"> for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),Object(c.b)("a",{parentName:"h3",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#705-712",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-error--struct-taurihttpinvaliduri-3"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error"},"Error")," = ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.InvalidUri",title:"struct tauri::http::InvalidUri"},"InvalidUri")),Object(c.b)("p",null,"The type returned in the event of a conversion error."),Object(c.b)("h4",{id:"pub-fn-try_fromt-struct-allocstringstring---enum-coreresultresultstruct-taurihttpuri-struct-taurihttpuri-as-trait-coreconverttryfromstruct-allocstringstringtype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from"},"try_from"),"(t: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html",title:"struct alloc::string::String"},"String"),") -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri"),", ","<",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri")," as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html",title:"struct alloc::string::String"},"String"),">>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#709",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"impl-trait-corecmpeq-for-struct-taurihttpuri"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/cmp/trait.Eq.html",title:"trait core::cmp::Eq"},"Eq")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri")),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://docs.rs/http/0.2.4/src/http/uri/mod.rs.html#982",title:"goto source code"},"[","src","]")),Object(c.b)("h2",{id:"auto-trait-implementations"},"Auto Trait Implementations"),Object(c.b)("h3",{id:"impl-trait-stdpanicrefunwindsafe-for-struct-taurihttpuri"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html",title:"trait std::panic::RefUnwindSafe"},"RefUnwindSafe")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri")),Object(c.b)("h3",{id:"impl-trait-coremarkersend-for-struct-taurihttpuri"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html",title:"trait core::marker::Send"},"Send")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri")),Object(c.b)("h3",{id:"impl-trait-coremarkersync-for-struct-taurihttpuri"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html",title:"trait core::marker::Sync"},"Sync")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri")),Object(c.b)("h3",{id:"impl-trait-coremarkerunpin-for-struct-taurihttpuri"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html",title:"trait core::marker::Unpin"},"Unpin")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri")),Object(c.b)("h3",{id:"impl-trait-stdpanicunwindsafe-for-struct-taurihttpuri"},"impl ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html",title:"trait std::panic::UnwindSafe"},"UnwindSafe")," for ",Object(c.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.Uri",title:"struct tauri::http::Uri"},"Uri")),Object(c.b)("h2",{id:"blanket-implementations"},"Blanket Implementations"),Object(c.b)("h3",{id:"implt-trait-coreanyany-for-t-where-t-static--trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html",title:"trait core::any::Any"},"Any")," for T where T: 'static + ?",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-type_idself---struct-coreanytypeidgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id"},"type_id"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html",title:"struct core::any::TypeId"},"TypeId"),Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Gets the ",Object(c.b)("inlineCode",{parentName:"p"},"TypeId")," of ",Object(c.b)("inlineCode",{parentName:"p"},"self"),". ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id"},"Read more")),Object(c.b)("h3",{id:"implt-trait-coreborrowborrowt-for-t-where-t-trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html",title:"trait core::borrow::Borrow"},"Borrow"),"<","T> for T where T: ?",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-borrowself---tgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow"},"borrow"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&"),"T",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Immutably borrows from an owned value. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow"},"Read more")),Object(c.b)("h3",{id:"implt-trait-coreborrowborrowmutt-for-t-where-t-trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html",title:"trait core::borrow::BorrowMut"},"BorrowMut"),"<","T> for T where T: ?",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-borrow_mutmut-self---muttgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut"},"borrow_mut"),"(&mut self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&mut"),"T",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Mutably borrows from an owned value. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut"},"Read more")),Object(c.b)("h3",{id:"implt-trait-coreconvertfromt-for-tgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html",title:"trait core::convert::From"},"From"),"<","T> for T",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-fromt-t---tgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from"},"from"),"(t: T) -> T",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"implt-u-trait-coreconvertintou-for-t-where-u-trait-coreconvertfromtgoto-source-code"},"impl","<","T, U> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","U> for T where U: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html",title:"trait core::convert::From"},"From"),"<","T>,",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-fn-intoself---ugoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into"},"into"),"(self) -> U",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"implt-trait-allocborrowtoowned-for-t-where-t-trait-corecloneclonegoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html",title:"trait alloc::borrow::ToOwned"},"ToOwned")," for T where T: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html",title:"trait core::clone::Clone"},"Clone"),",",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#84-96",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-owned--t"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned"},"Owned")," = T"),Object(c.b)("p",null,"The resulting type after obtaining ownership."),Object(c.b)("h4",{id:"pub-fn-to_ownedself---tgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned"},"to_owned"),"(&self) -> T",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#89",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Creates owned data from borrowed data, usually by cloning. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned"},"Read more")),Object(c.b)("h4",{id:"pub-fn-clone_intoself-target-muttgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into"},"clone_into"),"(&self, target: ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&mut"),"T)",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/alloc/borrow.rs.html#93",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"\ud83d\udd2c This is a nightly-only experimental API. (",Object(c.b)("inlineCode",{parentName:"p"},"toowned_clone_into"),")"),Object(c.b)("p",null,"recently added"),Object(c.b)("p",null,"Uses borrowed data to replace owned data, usually by cloning. ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/alloc/borrow/trait.ToOwned.html#method.clone_into"},"Read more")),Object(c.b)("h3",{id:"implt-trait-allocstringtostring-for-t-where-t-trait-corefmtdisplay--trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html",title:"trait alloc::string::ToString"},"ToString")," for T where T: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Display.html",title:"trait core::fmt::Display"},"Display")," + ?",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2372-2386",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"pub-default-fn-to_stringself---struct-allocstringstringgoto-source-code"},"pub default fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string"},"to_string"),"(&self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/string/struct.String.html",title:"struct alloc::string::String"},"String"),Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/alloc/string.rs.html#2378",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Converts the given value to a ",Object(c.b)("inlineCode",{parentName:"p"},"String"),". ",Object(c.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/alloc/string/trait.ToString.html#tymethod.to_string"},"Read more")),Object(c.b)("h3",{id:"implt-u-trait-coreconverttryfromu-for-t-where-u-trait-coreconvertintotgoto-source-code"},"impl","<","T, U> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","U> for T where U: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","T>,",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-error--enum-coreconvertinfallible"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error"},"Error")," = ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html",title:"enum core::convert::Infallible"},"Infallible")),Object(c.b)("p",null,"The type returned in the event of a conversion error."),Object(c.b)("h4",{id:"pub-fn-try_fromvalue-u---enum-coreresultresultt-t-as-trait-coreconverttryfromutype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from"},"try_from"),"(value: U) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<","T, ","<","T as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","U>>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"implt-u-trait-coreconverttryintou-for-t-where-u-trait-coreconverttryfromtgoto-source-code"},"impl","<","T, U> ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html",title:"trait core::convert::TryInto"},"TryInto"),"<","U> for T where U: ",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>,",Object(c.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576",title:"goto source code"},"[","src","]")),Object(c.b)("h4",{id:"type-error--u-as-trait-coreconverttryfromttype-coreconverttryfromerror"},"type ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error"},"Error")," = ","<","U as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error")),Object(c.b)("p",null,"The type returned in the event of a conversion error."),Object(c.b)("h4",{id:"pub-fn-try_intoself---enum-coreresultresultu-u-as-trait-coreconverttryfromttype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into"},"try_into"),"(self) -> ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<","U, ","<","U as ",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>>::",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(c.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573",title:"goto source code"},"[","src","]")),Object(c.b)("p",null,"Performs the conversion."),Object(c.b)("h3",{id:"implv-t-vzipv-for-t-where-v-multilanet"},"impl","<","V, T> VZip","<","V> for T where V: MultiLane","<","T>,"),Object(c.b)("h4",{id:"pub-fn-vzipself---v"},"pub fn ",Object(c.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#tymethod.vzip"},"vzip"),"(self) -> V"))}l.isMDXComponent=!0},454:function(t,r,e){"use strict";e.d(r,"a",(function(){return u})),e.d(r,"b",(function(){return b}));var o=e(0),a=e.n(o);function c(t,r,e){return r in t?Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[r]=e,t}function s(t,r){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),e.push.apply(e,o)}return e}function i(t){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?s(Object(e),!0).forEach((function(r){c(t,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):s(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))}))}return t}function n(t,r){if(null==t)return{};var e,o,a=function(t,r){if(null==t)return{};var e,o,a={},c=Object.keys(t);for(o=0;o<c.length;o++)e=c[o],r.indexOf(e)>=0||(a[e]=t[e]);return a}(t,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(o=0;o<c.length;o++)e=c[o],r.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var h=a.a.createContext({}),l=function(t){var r=a.a.useContext(h),e=r;return t&&(e="function"==typeof t?t(r):i(i({},r),t)),e},u=function(t){var r=l(t.components);return a.a.createElement(h.Provider,{value:r},t.children)},p={inlineCode:"code",wrapper:function(t){var r=t.children;return a.a.createElement(a.a.Fragment,{},r)}},m=a.a.forwardRef((function(t,r){var e=t.components,o=t.mdxType,c=t.originalType,s=t.parentName,h=n(t,["components","mdxType","originalType","parentName"]),u=l(e),m=o,b=u["".concat(s,".").concat(m)]||u[m]||p[m]||c;return e?a.a.createElement(b,i(i({ref:r},h),{},{components:e})):a.a.createElement(b,i({ref:r},h))}));function b(t,r){var e=arguments,o=r&&r.mdxType;if("string"==typeof t||o){var c=e.length,s=new Array(c);s[0]=m;var i={};for(var n in r)hasOwnProperty.call(r,n)&&(i[n]=r[n]);i.originalType=t,i.mdxType="string"==typeof t?t:o,s[1]=i;for(var h=2;h<c;h++)s[h]=e[h];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,e)}m.displayName="MDXCreateElement"}}]);