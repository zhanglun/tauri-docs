/*! For license information please see 61b903a0.80756e3c.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{221:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return s})),a.d(n,"metadata",(function(){return c})),a.d(n,"toc",(function(){return l})),a.d(n,"default",(function(){return u}));var t=a(3),r=a(7),o=(a(0),a(454)),i=a(458),s={title:"Create Rust Commands"},c={unversionedId:"usage/guides/command",id:"usage/guides/command",isDocsHomePage:!1,title:"Create Rust Commands",description:'Tauri provides a simple yet powerful "command" system for calling Rust functions from your web app. Commands can accept arguments and return values. They can also return errors and be async.',source:"@site/docs/en/usage/guides/command.md",sourceDirName:"usage/guides",slug:"/usage/guides/command",permalink:"/en/docs/usage/guides/command",editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/en/usage/guides/command.md",version:"current",frontMatter:{title:"Create Rust Commands"},sidebar:"docs",previous:{title:"Make your own CLI",permalink:"/en/docs/usage/guides/cli"},next:{title:"Events",permalink:"/en/docs/usage/guides/events"}},l=[{value:"Basic Example",id:"basic-example",children:[]},{value:"Passing Arguments",id:"passing-arguments",children:[]},{value:"Returning Data",id:"returning-data",children:[]},{value:"Error Handling",id:"error-handling",children:[]},{value:"Async Commands",id:"async-commands",children:[]},{value:"Accessing the Window in Commands",id:"accessing-the-window-in-commands",children:[]},{value:"Accessing an AppHandle in Commands",id:"accessing-an-apphandle-in-commands",children:[]},{value:"Accessing managed state",id:"accessing-managed-state",children:[]},{value:"Creating Multiple Commands",id:"creating-multiple-commands",children:[]},{value:"Complete Example",id:"complete-example",children:[]}],m={toc:l};function u(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},m,a,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,'Tauri provides a simple yet powerful "command" system for calling Rust functions from your web app. Commands can accept arguments and return values. They can also return errors and be ',Object(o.b)("inlineCode",{parentName:"p"},"async"),"."),Object(o.b)("h2",{id:"basic-example"},"Basic Example"),Object(o.b)("p",null,"Commands are defined in your ",Object(o.b)("inlineCode",{parentName:"p"},"src-tauri/src/main.rs")," file. To create a command, just add a function and annotate it with ",Object(o.b)("inlineCode",{parentName:"p"},"#[tauri::command]"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},'#[tauri::command]\nfn my_custom_command() {\n  println!("I was invoked from JS!");\n}\n')),Object(o.b)("p",null,"You will have to provide a list of your commands to the builder function like so:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},'// Also in main.rs\nfn main() {\n  tauri::Builder::default()\n    // This is where you pass in your commands\n    .invoke_handler(tauri::generate_handler![my_custom_command])\n    .run(tauri::generate_context!())\n    .expect("failed to run app");\n}\n')),Object(o.b)("p",null,"Now, you can invoke the command from your JS code:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"// With the Tauri API npm package:\nimport { invoke } from '@tauri-apps/api/tauri'\n// With the Tauri global script, enabled when `tauri.conf.json > build > withGlobalTauri` is set to true:\nconst invoke = window.__TAURI__.invoke\n\n// Invoke the command\ninvoke('my_custom_command')\n")),Object(o.b)("h2",{id:"passing-arguments"},"Passing Arguments"),Object(o.b)("p",null,"Your command handlers can take arguments:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},'#[tauri::command]\nfn my_custom_command(invoke_message: String) {\n  println!("I was invoked from JS, with this message: {}", invoke_message);\n}\n')),Object(o.b)("p",null,"Arguments should be passed as a JSON object with camelCase keys:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"invoke('my_custom_command', { invokeMessage: 'Hello!' })\n")),Object(o.b)("p",null,"Arguments can be of any type, as long as they implement ",Object(o.b)("a",{parentName:"p",href:"https://serde.rs/derive.html"},"serde::Deserialize"),"."),Object(o.b)("h2",{id:"returning-data"},"Returning Data"),Object(o.b)("p",null,"Command handlers can return data as well:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},'#[tauri::command]\nfn my_custom_command() -> String {\n  "Hello from Rust!".into()\n}\n')),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"invoke")," function returns a promise that resolves with the returned value:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"invoke('my_custom_command').then((message) => console.log(message))\n")),Object(o.b)("p",null,"Returned data can be of any type, as long as it implements ",Object(o.b)("a",{parentName:"p",href:"https://serde.rs/derive.html"},"Serde::Serialize"),"."),Object(o.b)("h2",{id:"error-handling"},"Error Handling"),Object(o.b)("p",null,"If your handler could fail and needs to be able to return an error, have the function return a ",Object(o.b)("inlineCode",{parentName:"p"},"Result"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},'#[tauri::command]\nfn my_custom_command() -> Result<String, String> {\n  // If something fails\n  Err("This failed!".into())\n  // If it worked\n  Ok("This worked!".into())\n}\n')),Object(o.b)("p",null,"If the command returns an error, the promise will reject, otherwise it resolves:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"invoke('my_custom_command')\n  .then((message) => console.log(message))\n  .catch((error) => console.error(error))\n")),Object(o.b)("h2",{id:"async-commands"},"Async Commands"),Object(o.b)(i.a,{title:"Note",mdxType:"Alert"},"Async commands are executed on a separate thread using the ",Object(o.b)("a",{href:"https://tauri.studio/en/docs/api/rust/tauri/async_runtime/fn.spawn"},"async runtime"),". Commands without the ",Object(o.b)("i",null,"async")," keyword are executed on the main thread, unless defined with ",Object(o.b)("i",null,"#[tauri::command(async)]"),"."),Object(o.b)("p",null,"If your command needs to run asynchronously, simply declare it as ",Object(o.b)("inlineCode",{parentName:"p"},"async"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},'#[tauri::command]\nasync fn my_custom_command() {\n  // Call another async function and wait for it to finish\n  let result = some_async_function().await;\n  println!("Result: {}", result);\n}\n')),Object(o.b)("p",null,"Since invoking the command from JS already returns a promise, it works just like any other command:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"invoke('my_custom_command').then(() => console.log('Completed!'))\n")),Object(o.b)("h2",{id:"accessing-the-window-in-commands"},"Accessing the Window in Commands"),Object(o.b)("p",null,"Commands can access the ",Object(o.b)("inlineCode",{parentName:"p"},"Window")," instance that invoked the message:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},'#[tauri::command]\nasync fn my_custom_command(window: tauri::Window) {\n  println!("Window: {}", window.label());\n}\n')),Object(o.b)("h2",{id:"accessing-an-apphandle-in-commands"},"Accessing an AppHandle in Commands"),Object(o.b)("p",null,"Commands can access an ",Object(o.b)("inlineCode",{parentName:"p"},"AppHandle")," instance:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},'#[tauri::command]\nasync fn my_custom_command(app_handle: tauri::AppHandle) {\n  let app_dir = app_handle.path_resolver().app_dir();\n  use tauri::GlobalShortcutManager;\n  app_handle.global_shortcut_manager().register("CTRL + U", move || {});\n}\n')),Object(o.b)("h2",{id:"accessing-managed-state"},"Accessing managed state"),Object(o.b)("p",null,"Tauri can manage state using the ",Object(o.b)("inlineCode",{parentName:"p"},"manage")," function on ",Object(o.b)("inlineCode",{parentName:"p"},"tauri::Builder"),".\nThe state can be accessed on a command using ",Object(o.b)("inlineCode",{parentName:"p"},"tauri::State"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},'struct MyState(String);\n\n#[tauri::command]\nfn my_custom_command(state: tauri::State<MyState>) {\n  assert_eq!(state.0 == "some state value", true);\n}\n\nfn main() {\n  tauri::Builder::default()\n    .manage(MyState("some state value".into()))\n    .invoke_handler(tauri::generate_handler![my_custom_command])\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),Object(o.b)("h2",{id:"creating-multiple-commands"},"Creating Multiple Commands"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"tauri::generate_handler!")," macro takes an array of commands. To register\nmultiple commands, you cannot call invoke_handler multiple times. Only the last\ncall will be used. You must pass each command to a single call of\n",Object(o.b)("inlineCode",{parentName:"p"},"tauri::generate_handler!"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},'#[tauri::command]\nfn cmd_a() -> String {\n    "Command a"\n}\n#[tauri::command]\nfn cmd_b() -> String {\n    "Command b"\n}\n\nfn main() {\n  tauri::Builder::default()\n    .invoke_handler(tauri::generate_handler![cmd_a, cmd_b])\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),Object(o.b)("h2",{id:"complete-example"},"Complete Example"),Object(o.b)("p",null,"Any or all of the above features can be combined:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust",metastring:"title=main.rs",title:"main.rs"},'// Definition in main.rs\n\nstruct Database;\n\n#[derive(serde::Serialize)]\nstruct CustomResponse {\n  message: String,\n  other_val: usize,\n}\n\nasync fn some_other_function() -> Option<String> {\n  Some("response".into())\n}\n\n#[tauri::command]\nasync fn my_custom_command(\n  window: tauri::Window,\n  number: usize,\n  database: tauri::State<\'_, Database>,\n) -> Result<CustomResponse, String> {\n  println!("Called from {}", window.label());\n  let result: Option<String> = some_other_function().await;\n  if let Some(message) = result {\n    Ok(CustomResponse {\n      message,\n      other_val: 42 + number,\n    })\n  } else {\n    Err("No result".into())\n  }\n}\n\nfn main() {\n  tauri::Builder::default()\n    .manage(Database {})\n    .invoke_handler(tauri::generate_handler![my_custom_command])\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"// Invocation from JS\n\ninvoke('my_custom_command', {\n  number: 42,\n})\n  .then((res) =>\n    console.log(`Message: ${res.message}, Other Val: ${res.other_val}`)\n  )\n  .catch((e) => console.error(e))\n")))}u.isMDXComponent=!0},454:function(e,n,a){"use strict";a.d(n,"a",(function(){return u})),a.d(n,"b",(function(){return b}));var t=a(0),r=a.n(t);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),m=function(e){var n=r.a.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},u=function(e){var n=m(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},p=r.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=m(a),p=t,b=u["".concat(i,".").concat(p)]||u[p]||d[p]||o;return a?r.a.createElement(b,s(s({ref:n},l),{},{components:a})):r.a.createElement(b,s({ref:n},l))}));function b(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,i=new Array(o);i[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:t,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"},455:function(e,n,a){var t;!function(){"use strict";var a={}.hasOwnProperty;function r(){for(var e=[],n=0;n<arguments.length;n++){var t=arguments[n];if(t){var o=typeof t;if("string"===o||"number"===o)e.push(t);else if(Array.isArray(t)){if(t.length){var i=r.apply(null,t);i&&e.push(i)}}else if("object"===o)if(t.toString===Object.prototype.toString)for(var s in t)a.call(t,s)&&t[s]&&e.push(s);else e.push(t.toString())}}return e.join(" ")}e.exports?(r.default=r,e.exports=r):void 0===(t=function(){return r}.apply(n,[]))||(e.exports=t)}()},456:function(e,n,a){"use strict";var t=a(0),r=a.n(t),o=a(455),i=a.n(o);const s={danger:"var(--ifm-color-danger)",warning:"var(--ifm-color-warning)",info:"var(--ifm-color-info)",default:"var(--ifm-font-base-color)"};n.a=({title:e,className:n,color:a="default"})=>r.a.createElement("i",{className:i()("ti-"+e,n),style:{color:s[a]}})},458:function(e,n,a){"use strict";var t=a(0),r=a.n(t),o=a(455),i=a.n(o),s=a(456),c=a(56),l=a.n(c);n.a=({type:e="info",title:n,icon:a,children:t})=>r.a.createElement("div",{className:i()("alert","alert--"+e,l.a.alert),style:{marginBottom:"30px"},role:"alert"},a&&r.a.createElement(r.a.Fragment,null,r.a.createElement(s.a,{title:a,className:l.a.icon}),"\xa0"),r.a.createElement("div",{className:l.a.container},n&&r.a.createElement("span",{className:l.a.title},n),r.a.createElement("div",{className:l.a.content},t)))}}]);