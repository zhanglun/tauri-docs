/*! For license information please see efcd4ba3.a8edc032.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[344],{421:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),i=(n(0),n(454)),o=(n(458),{title:"How to code-sign and notorize a OSX .dmg file with GitHub Actions",sidebar_label:"OSX Code-signing with GitHub Actions"}),s={unversionedId:"usage/guides/bundler/sign-osx",id:"usage/guides/bundler/sign-osx",isDocsHomePage:!1,title:"How to code-sign and notorize a OSX .dmg file with GitHub Actions",description:"Intro",source:"@site/docs/zh-hans/usage/guides/bundler/sign-osx.md",sourceDirName:"usage/guides/bundler",slug:"/usage/guides/bundler/sign-osx",permalink:"/tauri-docs/docs/usage/guides/bundler/sign-osx",editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/zh-hans/usage/guides/bundler/sign-osx.md",version:"current",sidebar_label:"OSX Code-signing with GitHub Actions",frontMatter:{title:"How to code-sign and notorize a OSX .dmg file with GitHub Actions",sidebar_label:"OSX Code-signing with GitHub Actions"},sidebar:"docs",previous:{title:"Debian packages",permalink:"/tauri-docs/docs/usage/guides/bundler/debian"},next:{title:"Make your own CLI",permalink:"/tauri-docs/docs/usage/guides/cli"}},c=[{value:"Intro",id:"intro",children:[]},{value:"Prerequisits",id:"prerequisits",children:[]},{value:"GitHub Secrets",id:"github-secrets",children:[{value:"Workflow Modifications",id:"workflow-modifications",children:[]}]}],l={toc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"intro"},"Intro"),Object(i.b)("p",null,"Tauri has a smooth code-signing & notarization functionality built directly into the bundler and configured via the ",Object(i.b)("inlineCode",{parentName:"p"},"tauri.conf.json")," "),Object(i.b)("p",null,"This guide will give a brief overview of how to sign an application, and how to get the app notarized with Apple. All in a GitHub action. "),Object(i.b)("h2",{id:"prerequisits"},"Prerequisits"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"OSX - This will be needed to create/export the certificate."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://developer.apple.com/programs/"},"Apple Developer Program")," subscription"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://developer.apple.com/developer-id/"},"Developer ID Application")," certificate",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"see ",Object(i.b)("a",{parentName:"li",href:"https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions#reference"},"this")," guide for additional help"))),Object(i.b)("li",{parentName:"ul"},"Working Tauri application, being built and published via GitHub Actions, as shown in ",Object(i.b)("a",{parentName:"li",href:"https://github.com/tauri-apps/tauri-action"},"tauri-action"),"  ")),Object(i.b)("h2",{id:"github-secrets"},"GitHub Secrets"),Object(i.b)("p",null,"We will need to add a few GitHub secrets for the proper configuration of the GitHub Action. These can be named however you would like, but we must assign them to the correct Tauri variables, so keep them as relevant as possible. "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"You can view ",Object(i.b)("a",{parentName:"li",href:"https://docs.github.com/en/actions/reference/encrypted-secrets"},"this")," guide for how to add GitHub secrets. ")),Object(i.b)("p",null,"The secrets I used are as follows"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"center"},"GitHub Secrets"),Object(i.b)("th",{parentName:"tr",align:"center"},"Value for Variable"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},"APPLE_CERTIFICATE"),Object(i.b)("td",{parentName:"tr",align:"center"},"Base64 encoded version of your .p12 certificate. You can find a guide ",Object(i.b)("a",{parentName:"td",href:"https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions#reference"},"here"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},"APPLE_CERTIFICATE_PASSWORD"),Object(i.b)("td",{parentName:"tr",align:"center"},"Certificate password used on creation of certificate")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},"APPLE_SIGNING_IDENTITY"),Object(i.b)("td",{parentName:"tr",align:"center"},'"Developer ID Application: Your Company, Inc (XXXXXXXXX)" shown in your keychain. you can also use ',Object(i.b)("inlineCode",{parentName:"td"},"security find-identity -v -p codesigning")," on OSX to find this identity")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},"APPLE_ID"),Object(i.b)("td",{parentName:"tr",align:"center"},"this is the email used to request the certificate")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},"APPLE_PASSWORD"),Object(i.b)("td",{parentName:"tr",align:"center"},"This is an app-specific password, that must also be created by the same account used to request the certificate. Guide ",Object(i.b)("a",{parentName:"td",href:"https://support.apple.com/en-ca/HT204397"},"here"))))),Object(i.b)("p",null,"Once we have established the GitHub Secrets we will need to make some modifications to our GitHub publish action in ",Object(i.b)("inlineCode",{parentName:"p"},".github/workflows/main.yml")," "),Object(i.b)("hr",null),Object(i.b)("h3",{id:"workflow-modifications"},"Workflow Modifications"),Object(i.b)("p",null,"All we will have to do from here is assign the GitHub secrets to the proper environment variables. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}\nAPPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}\nAPPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}\nAPPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_IDENTITY_ID }}\nAPPLE_ID: ${{ secrets.APPLE_ID }}\nAPPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}\n")),Object(i.b)("p",null,"If you are using the tauri-action publish template, then your result should look similar the the ",Object(i.b)("inlineCode",{parentName:"p"},"env:")," portion below. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'name: "publish"\non:\n  push:\n    branches:\n      - release\n\njobs:\n  publish-tauri:\n    strategy:\n      fail-fast: false\n      matrix:\n        platform: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.platform }}\n    steps:\n    - uses: actions/checkout@v2\n    - name: setup node\n      uses: actions/setup-node@v1\n      with:\n        node-version: 12\n    - name: install Rust stable\n      uses: actions-rs/toolchain@v1\n      with:\n        toolchain: stable\n    - name: install webkit2gtk (ubuntu only)\n      if: matrix.platform == \'ubuntu-latest\'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y webkit2gtk-4.0\n    - name: install app dependencies and build it\n      run: yarn && yarn build\n    - uses: tauri-apps/tauri-action@v0\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}\n        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}\n        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}\n        APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_IDENTITY_ID }}\n        APPLE_ID: ${{ secrets.APPLE_ID }}\n        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}\n      with:\n        tagName: app-v__VERSION__ # the action automatically replaces \\_\\_VERSION\\_\\_ with the app version\n        releaseName: "App v__VERSION__"\n        releaseBody: "See the assets to download this version and install."\n        releaseDraft: true\n        prerelease: false\n')))}u.isMDXComponent=!0},454:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=u(n),d=a,m=b["".concat(o,".").concat(d)]||b[d]||p[d]||i;return n?r.a.createElement(m,s(s({ref:t},l),{},{components:n})):r.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},455:function(e,t,n){var a;!function(){"use strict";var n={}.hasOwnProperty;function r(){for(var e=[],t=0;t<arguments.length;t++){var a=arguments[t];if(a){var i=typeof a;if("string"===i||"number"===i)e.push(a);else if(Array.isArray(a)){if(a.length){var o=r.apply(null,a);o&&e.push(o)}}else if("object"===i)if(a.toString===Object.prototype.toString)for(var s in a)n.call(a,s)&&a[s]&&e.push(s);else e.push(a.toString())}}return e.join(" ")}e.exports?(r.default=r,e.exports=r):void 0===(a=function(){return r}.apply(t,[]))||(e.exports=a)}()},456:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(455),o=n.n(i);const s={danger:"var(--ifm-color-danger)",warning:"var(--ifm-color-warning)",info:"var(--ifm-color-info)",default:"var(--ifm-font-base-color)"};t.a=({title:e,className:t,color:n="default"})=>r.a.createElement("i",{className:o()("ti-"+e,t),style:{color:s[n]}})},458:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(455),o=n.n(i),s=n(456),c=n(56),l=n.n(c);t.a=({type:e="info",title:t,icon:n,children:a})=>r.a.createElement("div",{className:o()("alert","alert--"+e,l.a.alert),style:{marginBottom:"30px"},role:"alert"},n&&r.a.createElement(r.a.Fragment,null,r.a.createElement(s.a,{title:n,className:l.a.icon}),"\xa0"),r.a.createElement("div",{className:l.a.container},t&&r.a.createElement("span",{className:l.a.title},t),r.a.createElement("div",{className:l.a.content},a)))}}]);