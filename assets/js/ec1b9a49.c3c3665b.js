(window.webpackJsonp=window.webpackJsonp||[]).push([[339],{416:function(t,e,r){"use strict";r.r(e),r.d(e,"frontMatter",(function(){return n})),r.d(e,"metadata",(function(){return c})),r.d(e,"toc",(function(){return i})),r.d(e,"default",(function(){return s}));var a=r(3),o=r(7),u=(r(0),r(454)),n={title:"Struct tauri::async_runtime::TokioJoinHandle",sidebar_label:"struct.TokioJoinHandle",custom_edit_url:null},c={unversionedId:"api/rust/tauri/async_runtime/struct.TokioJoinHandle",id:"api/rust/tauri/async_runtime/struct.TokioJoinHandle",isDocsHomePage:!1,title:"Struct tauri::async_runtime::TokioJoinHandle",description:"`rs",source:"@site/docs/en/api/rust/tauri/async_runtime/struct.TokioJoinHandle.md",sourceDirName:"api/rust/tauri/async_runtime",slug:"/api/rust/tauri/async_runtime/struct.TokioJoinHandle",permalink:"/en/docs/api/rust/tauri/async_runtime/struct.TokioJoinHandle",editUrl:null,version:"current",sidebar_label:"struct.TokioJoinHandle",frontMatter:{title:"Struct tauri::async_runtime::TokioJoinHandle",sidebar_label:"struct.TokioJoinHandle",custom_edit_url:null},sidebar:"docs",previous:{title:"Struct tauri::async_runtime::Sender",permalink:"/en/docs/api/rust/tauri/async_runtime/struct.Sender"},next:{title:"Trait tauri::async_runtime::RuntimeHandle",permalink:"/en/docs/api/rust/tauri/async_runtime/trait.RuntimeHandle"}},i=[{value:"Examples",id:"examples",children:[]},{value:"Implementations",id:"implementations",children:[{value:"impl&lt;T&gt; struct tauri::async_runtime::TokioJoinHandle&lt;T&gt;",id:"implt-struct-tauriasync_runtimetokiojoinhandlet",children:[]}]},{value:"Trait Implementations",id:"trait-implementations",children:[{value:"impl&lt;T&gt; trait core::fmt::Debug for struct tauri::async_runtime::TokioJoinHandle&lt;T&gt; where T: trait core::fmt::Debug,",id:"implt-trait-corefmtdebug-for-struct-tauriasync_runtimetokiojoinhandlet-where-t-trait-corefmtdebug",children:[]},{value:"impl&lt;T&gt; trait core::ops::drop::Drop for struct tauri::async_runtime::TokioJoinHandle&lt;T&gt;",id:"implt-trait-coreopsdropdrop-for-struct-tauriasync_runtimetokiojoinhandlet",children:[]},{value:"impl&lt;T&gt; trait core::future::future::Future for struct tauri::async_runtime::TokioJoinHandle&lt;T&gt;",id:"implt-trait-corefuturefuturefuture-for-struct-tauriasync_runtimetokiojoinhandlet",children:[]},{value:"impl&lt;T&gt; trait core::marker::Send for struct tauri::async_runtime::TokioJoinHandle&lt;T&gt; where T: trait core::marker::Send,",id:"implt-trait-coremarkersend-for-struct-tauriasync_runtimetokiojoinhandlet-where-t-trait-coremarkersend",children:[]},{value:"impl&lt;T&gt; trait core::marker::Sync for struct tauri::async_runtime::TokioJoinHandle&lt;T&gt; where T: trait core::marker::Send,",id:"implt-trait-coremarkersync-for-struct-tauriasync_runtimetokiojoinhandlet-where-t-trait-coremarkersend",children:[]},{value:"impl&lt;T&gt; trait core::marker::Unpin for struct tauri::async_runtime::TokioJoinHandle&lt;T&gt;",id:"implt-trait-coremarkerunpin-for-struct-tauriasync_runtimetokiojoinhandlet",children:[]}]},{value:"Auto Trait Implementations",id:"auto-trait-implementations",children:[{value:"impl&lt;T&gt; !trait std::panic::RefUnwindSafe for struct tauri::async_runtime::TokioJoinHandle&lt;T&gt;",id:"implt-trait-stdpanicrefunwindsafe-for-struct-tauriasync_runtimetokiojoinhandlet",children:[]},{value:"impl&lt;T&gt; !trait std::panic::UnwindSafe for struct tauri::async_runtime::TokioJoinHandle&lt;T&gt;",id:"implt-trait-stdpanicunwindsafe-for-struct-tauriasync_runtimetokiojoinhandlet",children:[]}]},{value:"Blanket Implementations",id:"blanket-implementations",children:[{value:"impl&lt;T&gt; trait core::any::Any for T where T: &#39;static + ?trait core::marker::Sized,goto source code",id:"implt-trait-coreanyany-for-t-where-t-static--trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait core::borrow::Borrow&lt;T&gt; for T where T: ?trait core::marker::Sized,goto source code",id:"implt-trait-coreborrowborrowt-for-t-where-t-trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait core::borrow::BorrowMut&lt;T&gt; for T where T: ?trait core::marker::Sized,goto source code",id:"implt-trait-coreborrowborrowmutt-for-t-where-t-trait-coremarkersizedgoto-source-code",children:[]},{value:"impl&lt;T&gt; trait core::convert::From&lt;T&gt; for Tgoto source code",id:"implt-trait-coreconvertfromt-for-tgoto-source-code",children:[]},{value:"impl&lt;F&gt; FutureExt for F where F: trait core::future::future::Future + ?trait core::marker::Sized,",id:"implf-futureext-for-f-where-f-trait-corefuturefuturefuture--trait-coremarkersized",children:[]},{value:"impl&lt;T&gt; FutureExt for T where T: trait core::future::future::Future + ?trait core::marker::Sized,",id:"implt-futureext-for-t-where-t-trait-corefuturefuturefuture--trait-coremarkersized",children:[]},{value:"impl&lt;T, U&gt; trait core::convert::Into&lt;U&gt; for T where U: trait core::convert::From&lt;T&gt;,goto source code",id:"implt-u-trait-coreconvertintou-for-t-where-u-trait-coreconvertfromtgoto-source-code",children:[]},{value:"impl&lt;F&gt; trait core::future::into_future::IntoFuture for F where F: trait core::future::future::Future,goto source code",id:"implf-trait-corefutureinto_futureintofuture-for-f-where-f-trait-corefuturefuturefuturegoto-source-code",children:[]},{value:"impl&lt;T, U&gt; trait core::convert::TryFrom&lt;U&gt; for T where U: trait core::convert::Into&lt;T&gt;,goto source code",id:"implt-u-trait-coreconverttryfromu-for-t-where-u-trait-coreconvertintotgoto-source-code",children:[]},{value:"impl&lt;F, T, E&gt; TryFuture for F where F: trait core::future::future::Future&lt;Output = enum core::result::Result&lt;T, E&gt;&gt; + ?trait core::marker::Sized,",id:"implf-t-e-tryfuture-for-f-where-f-trait-corefuturefuturefutureoutput--enum-coreresultresultt-e--trait-coremarkersized",children:[]},{value:"impl&lt;Fut&gt; TryFutureExt for Fut where Fut: TryFuture + ?trait core::marker::Sized,",id:"implfut-tryfutureext-for-fut-where-fut-tryfuture--trait-coremarkersized",children:[]},{value:"impl&lt;T, U&gt; trait core::convert::TryInto&lt;U&gt; for T where U: trait core::convert::TryFrom&lt;T&gt;,goto source code",id:"implt-u-trait-coreconverttryintou-for-t-where-u-trait-coreconverttryfromtgoto-source-code",children:[]},{value:"impl&lt;V, T&gt; VZip&lt;V&gt; for T where V: MultiLane&lt;T&gt;,",id:"implv-t-vzipv-for-t-where-v-multilanet",children:[]}]}],l={toc:i};function s(t){var e=t.components,r=Object(o.a)(t,["components"]);return Object(u.b)("wrapper",Object(a.a)({},l,r,{components:e,mdxType:"MDXLayout"}),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rs"},"pub struct TokioJoinHandle<T> { /* fields omitted */ }\n")),Object(u.b)("p",null,"Expand description"),Object(u.b)("p",null,"An owned permission to join on a task (await its termination)."),Object(u.b)("p",null,"This can be thought of as the equivalent of ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/std/thread/struct.JoinHandle.html"},Object(u.b)("inlineCode",{parentName:"a"},"std::thread::JoinHandle"))," for a task rather than a thread."),Object(u.b)("p",null,"A ",Object(u.b)("inlineCode",{parentName:"p"},"JoinHandle")," ",Object(u.b)("em",{parentName:"p"},"detaches")," the associated task when it is dropped, which means that there is no longer any handle to the task, and no way to ",Object(u.b)("inlineCode",{parentName:"p"},"join")," on it."),Object(u.b)("p",null,"This ",Object(u.b)("inlineCode",{parentName:"p"},"struct")," is created by the ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/crate::task::spawn()"},Object(u.b)("inlineCode",{parentName:"a"},"task::spawn"))," and ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/crate::task::spawn_blocking"},Object(u.b)("inlineCode",{parentName:"a"},"task::spawn_blocking"))," functions."),Object(u.b)("h2",{id:"examples"},"Examples"),Object(u.b)("p",null,"Creation from ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/crate::task::spawn()"},Object(u.b)("inlineCode",{parentName:"a"},"task::spawn")),":"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rs"},"use tokio::task;\n\nlet join_handle: task::JoinHandle<_> = task::spawn(async {\n    // some work here\n});\n")),Object(u.b)("p",null,"Creation from ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/crate::task::spawn_blocking"},Object(u.b)("inlineCode",{parentName:"a"},"task::spawn_blocking")),":"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rs"},"use tokio::task;\n\nlet join_handle: task::JoinHandle<_> = task::spawn_blocking(|| {\n    // some blocking work here\n});\n")),Object(u.b)("p",null,"The generic parameter ",Object(u.b)("inlineCode",{parentName:"p"},"T")," in ",Object(u.b)("inlineCode",{parentName:"p"},"JoinHandle<T>")," is the return type of the spawned task. If the return value is an i32, the join handle has type ",Object(u.b)("inlineCode",{parentName:"p"},"JoinHandle<i32>"),":"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rs"},"use tokio::task;\n\nlet join_handle: task::JoinHandle<i32> = task::spawn(async {\n    5 + 3\n});\n\n")),Object(u.b)("p",null,"If the task does not have a return value, the join handle has type ",Object(u.b)("inlineCode",{parentName:"p"},"JoinHandle<()>"),":"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rs"},'use tokio::task;\n\nlet join_handle: task::JoinHandle<()> = task::spawn(async {\n    println!("I return nothing.");\n});\n')),Object(u.b)("p",null,"Note that ",Object(u.b)("inlineCode",{parentName:"p"},"handle.await")," doesn\u2019t give you the return type directly. It is wrapped in a ",Object(u.b)("inlineCode",{parentName:"p"},"Result")," because panics in the spawned task are caught by Tokio. The ",Object(u.b)("inlineCode",{parentName:"p"},"?")," operator has to be double chained to extract the returned value:"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rs"},"use tokio::task;\nuse std::io;\n\n#[tokio::main]\n\nasync fn main() -> io::Result<()> {\n    let join_handle: task::JoinHandle<Result<i32, io::Error>> = tokio::spawn(async {\n        Ok(5 + 3)\n    });\n\n    let result = join_handle.await??;\n    assert_eq!(result, 8);\n    Ok(())\n}\n")),Object(u.b)("p",null,"If the task panics, the error is a ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/crate::task::JoinError"},Object(u.b)("inlineCode",{parentName:"a"},"JoinError"))," that contains the panic:"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rs"},'use tokio::task;\nuse std::io;\nuse std::panic;\n\n#[tokio::main]\n\nasync fn main() -> io::Result<()> {\n    let join_handle: task::JoinHandle<Result<i32, io::Error>> = tokio::spawn(async {\n        panic!("boom");\n    });\n\n    let err = join_handle.await.unwrap_err();\n    assert!(err.is_panic());\n    Ok(())\n}\n\n')),Object(u.b)("p",null,"Child being detached and outliving its parent:"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rs"},'use tokio::task;\nuse tokio::time;\nuse std::time::Duration;\n\nlet original_task = task::spawn(async {\n    let _detached_task = task::spawn(async {\n        // Here we sleep to make sure that the first task returns before.\n        time::sleep(Duration::from_millis(10)).await;\n        // This will be called, even though the JoinHandle is dropped.\n        println!("\u266b Still alive \u266b");\n    });\n});\n\noriginal_task.await.expect("The task being joined has panicked");\nprintln!("Original task is joined.");\n\n// We make sure that the new task has time to run, before the main\n// task returns.\n\ntime::sleep(Duration::from_millis(1000)).await;\n')),Object(u.b)("h2",{id:"implementations"},"Implementations"),Object(u.b)("h3",{id:"implt-struct-tauriasync_runtimetokiojoinhandlet"},"impl","<","T> ",Object(u.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.TokioJoinHandle",title:"struct tauri::async_runtime::TokioJoinHandle"},"JoinHandle"),"<","T>"),Object(u.b)("h4",{id:"pub-fn-abortself"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.abort"},"abort"),"(&self)"),Object(u.b)("p",null,"Abort the task associated with the handle."),Object(u.b)("p",null,"Awaiting a cancelled task might complete as usual if the task was already completed at the time it was cancelled, but most likely it will complete with a ",Object(u.b)("inlineCode",{parentName:"p"},"Err(JoinError::Cancelled)"),"."),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rs"},"use tokio::time;\n\n#[tokio::main]\n\nasync fn main() {\n   let mut handles = Vec::new();\n\n   handles.push(tokio::spawn(async {\n      time::sleep(time::Duration::from_secs(10)).await;\n      true\n   }));\n\n   handles.push(tokio::spawn(async {\n      time::sleep(time::Duration::from_secs(10)).await;\n      false\n   }));\n\n   for handle in &handles {\n       handle.abort();\n   }\n\n   for handle in handles {\n       assert!(handle.await.unwrap_err().is_cancelled());\n   }\n}\n")),Object(u.b)("h2",{id:"trait-implementations"},"Trait Implementations"),Object(u.b)("h3",{id:"implt-trait-corefmtdebug-for-struct-tauriasync_runtimetokiojoinhandlet-where-t-trait-corefmtdebug"},"impl","<","T> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html",title:"trait core::fmt::Debug"},"Debug")," for ",Object(u.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.TokioJoinHandle",title:"struct tauri::async_runtime::TokioJoinHandle"},"JoinHandle"),"<","T> where T: ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html",title:"trait core::fmt::Debug"},"Debug"),","),Object(u.b)("h4",{id:"pub-fn-fmtself-fmt-mut-struct-corefmtformatter_---enum-coreresultresult-struct-corefmterror"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt"},"fmt"),"(&self, fmt: &mut ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/struct.Formatter.html",title:"struct core::fmt::Formatter"},"Formatter"),"<","'","_",">) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.unit.html"},"()"),", ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/fmt/struct.Error.html",title:"struct core::fmt::Error"},"Error"),">"),Object(u.b)("p",null,"Formats the value using the given formatter. ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/fmt/trait.Debug.html#tymethod.fmt"},"Read more")),Object(u.b)("h3",{id:"implt-trait-coreopsdropdrop-for-struct-tauriasync_runtimetokiojoinhandlet"},"impl","<","T> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html",title:"trait core::ops::drop::Drop"},"Drop")," for ",Object(u.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.TokioJoinHandle",title:"struct tauri::async_runtime::TokioJoinHandle"},"JoinHandle"),"<","T>"),Object(u.b)("h4",{id:"pub-fn-dropmut-self"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html#tymethod.drop"},"drop"),"(&mut self)"),Object(u.b)("p",null,"Executes the destructor for this type. ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/ops/drop/trait.Drop.html#tymethod.drop"},"Read more")),Object(u.b)("h3",{id:"implt-trait-corefuturefuturefuture-for-struct-tauriasync_runtimetokiojoinhandlet"},"impl","<","T> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future")," for ",Object(u.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.TokioJoinHandle",title:"struct tauri::async_runtime::TokioJoinHandle"},"JoinHandle"),"<","T>"),Object(u.b)("h4",{id:"type-output--enum-coreresultresultt-joinerror"},"type ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output"},"Output")," = ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<","T, JoinError>"),Object(u.b)("p",null,"The type of value produced on completion."),Object(u.b)("h4",{id:"pub-fn-poll-self-struct-corepinpinmut-struct-tauriasync_runtimetokiojoinhandlet-cx-mut-struct-coretaskwakecontext_----enum-coretaskpollpollstruct-tauriasync_runtimetokiojoinhandlet-as-trait-corefuturefuturefuturetype-corefuturefuturefutureoutput"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#tymethod.poll"},"poll"),"( self: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html",title:"struct core::pin::Pin"},"Pin"),"<","&mut ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.TokioJoinHandle",title:"struct tauri::async_runtime::TokioJoinHandle"},"JoinHandle"),"<","T>>, cx: &mut ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html",title:"struct core::task::wake::Context"},"Context"),"<","'","_","> ) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html",title:"enum core::task::poll::Poll"},"Poll"),"<","<",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/struct.TokioJoinHandle",title:"struct tauri::async_runtime::TokioJoinHandle"},"JoinHandle"),"<","T> as ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),">::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),">"),Object(u.b)("p",null,"Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available. ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#tymethod.poll"},"Read more")),Object(u.b)("h3",{id:"implt-trait-coremarkersend-for-struct-tauriasync_runtimetokiojoinhandlet-where-t-trait-coremarkersend"},"impl","<","T> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html",title:"trait core::marker::Send"},"Send")," for ",Object(u.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.TokioJoinHandle",title:"struct tauri::async_runtime::TokioJoinHandle"},"JoinHandle"),"<","T> where T: ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html",title:"trait core::marker::Send"},"Send"),","),Object(u.b)("h3",{id:"implt-trait-coremarkersync-for-struct-tauriasync_runtimetokiojoinhandlet-where-t-trait-coremarkersend"},"impl","<","T> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sync.html",title:"trait core::marker::Sync"},"Sync")," for ",Object(u.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.TokioJoinHandle",title:"struct tauri::async_runtime::TokioJoinHandle"},"JoinHandle"),"<","T> where T: ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html",title:"trait core::marker::Send"},"Send"),","),Object(u.b)("h3",{id:"implt-trait-coremarkerunpin-for-struct-tauriasync_runtimetokiojoinhandlet"},"impl","<","T> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html",title:"trait core::marker::Unpin"},"Unpin")," for ",Object(u.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.TokioJoinHandle",title:"struct tauri::async_runtime::TokioJoinHandle"},"JoinHandle"),"<","T>"),Object(u.b)("h2",{id:"auto-trait-implementations"},"Auto Trait Implementations"),Object(u.b)("h3",{id:"implt-trait-stdpanicrefunwindsafe-for-struct-tauriasync_runtimetokiojoinhandlet"},"impl","<","T> \\","!",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/panic/trait.RefUnwindSafe.html",title:"trait std::panic::RefUnwindSafe"},"RefUnwindSafe")," for ",Object(u.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.TokioJoinHandle",title:"struct tauri::async_runtime::TokioJoinHandle"},"JoinHandle"),"<","T>"),Object(u.b)("h3",{id:"implt-trait-stdpanicunwindsafe-for-struct-tauriasync_runtimetokiojoinhandlet"},"impl","<","T> \\","!",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html",title:"trait std::panic::UnwindSafe"},"UnwindSafe")," for ",Object(u.b)("a",{parentName:"h3",href:"/docs/api/rust/tauri/struct.TokioJoinHandle",title:"struct tauri::async_runtime::TokioJoinHandle"},"JoinHandle"),"<","T>"),Object(u.b)("h2",{id:"blanket-implementations"},"Blanket Implementations"),Object(u.b)("h3",{id:"implt-trait-coreanyany-for-t-where-t-static--trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html",title:"trait core::any::Any"},"Any")," for T where T: 'static + ?",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#131-135",title:"goto source code"},"[","src","]")),Object(u.b)("h4",{id:"pub-fn-type_idself---struct-coreanytypeidgoto-source-code"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id"},"type_id"),"(&self) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/any/struct.TypeId.html",title:"struct core::any::TypeId"},"TypeId"),Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/any.rs.html#132",title:"goto source code"},"[","src","]")),Object(u.b)("p",null,"Gets the ",Object(u.b)("inlineCode",{parentName:"p"},"TypeId")," of ",Object(u.b)("inlineCode",{parentName:"p"},"self"),". ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/any/trait.Any.html#tymethod.type_id"},"Read more")),Object(u.b)("h3",{id:"implt-trait-coreborrowborrowt-for-t-where-t-trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html",title:"trait core::borrow::Borrow"},"Borrow"),"<","T> for T where T: ?",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#208-213",title:"goto source code"},"[","src","]")),Object(u.b)("h4",{id:"pub-fn-borrowself---tgoto-source-code"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow"},"borrow"),"(&self) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&"),"T",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#210",title:"goto source code"},"[","src","]")),Object(u.b)("p",null,"Immutably borrows from an owned value. ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.Borrow.html#tymethod.borrow"},"Read more")),Object(u.b)("h3",{id:"implt-trait-coreborrowborrowmutt-for-t-where-t-trait-coremarkersizedgoto-source-code"},"impl","<","T> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html",title:"trait core::borrow::BorrowMut"},"BorrowMut"),"<","T> for T where T: ?",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),",",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#216-220",title:"goto source code"},"[","src","]")),Object(u.b)("h4",{id:"pub-fn-borrow_mutmut-self---muttgoto-source-code"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut"},"borrow_mut"),"(&mut self) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&mut"),"T",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/borrow.rs.html#217",title:"goto source code"},"[","src","]")),Object(u.b)("p",null,"Mutably borrows from an owned value. ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut"},"Read more")),Object(u.b)("h3",{id:"implt-trait-coreconvertfromt-for-tgoto-source-code"},"impl","<","T> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html",title:"trait core::convert::From"},"From"),"<","T> for T",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#544-548",title:"goto source code"},"[","src","]")),Object(u.b)("h4",{id:"pub-fn-fromt-t---tgoto-source-code"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html#tymethod.from"},"from"),"(t: T) -> T",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#545",title:"goto source code"},"[","src","]")),Object(u.b)("p",null,"Performs the conversion."),Object(u.b)("h3",{id:"implf-futureext-for-f-where-f-trait-corefuturefuturefuture--trait-coremarkersized"},"impl","<","F> FutureExt for F where F: ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future")," + ?",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),","),Object(u.b)("h4",{id:"fn-pollmut-self-cx-mut-struct-coretaskwakecontext_---enum-coretaskpollpollselftype-corefuturefuturefutureoutput-where-self-trait-coremarkerunpin"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.poll"},"poll"),"(&mut self, cx: &mut ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html",title:"struct core::task::wake::Context"},"Context"),"<","'","_",">) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html",title:"enum core::task::poll::Poll"},"Poll"),"<","Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),"> where Self: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html",title:"trait core::marker::Unpin"},"Unpin"),","),Object(u.b)("p",null,"A convenience for calling ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#tymethod.poll",title:"Future::poll()"},Object(u.b)("inlineCode",{parentName:"a"},"Future::poll()"))," on ",Object(u.b)("inlineCode",{parentName:"p"},"!"),Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html",title:"Unpin"},Object(u.b)("inlineCode",{parentName:"a"},"Unpin"))," types."),Object(u.b)("h4",{id:"fn-orfself-other-f---orself-f-where-f-trait-corefuturefuturefutureoutput--selftype-corefuturefuturefutureoutput"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.or"},"or"),"<","F>(self, other: F) -> Or","<","Self, F> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),"<","Output = Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),">,"),Object(u.b)("p",null,"Returns the result of ",Object(u.b)("inlineCode",{parentName:"p"},"self")," or ",Object(u.b)("inlineCode",{parentName:"p"},"other")," future, preferring ",Object(u.b)("inlineCode",{parentName:"p"},"self")," if both are ready. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.or"},"Read more")),Object(u.b)("h4",{id:"fn-racefself-other-f---raceself-f-where-f-trait-corefuturefuturefutureoutput--selftype-corefuturefuturefutureoutput"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.race"},"race"),"<","F>(self, other: F) -> Race","<","Self, F> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),"<","Output = Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),">,"),Object(u.b)("p",null,"Returns the result of ",Object(u.b)("inlineCode",{parentName:"p"},"self")," or ",Object(u.b)("inlineCode",{parentName:"p"},"other")," future, with no preference if both are ready. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.race"},"Read more")),Object(u.b)("h4",{id:"fn-catch_unwindself---catchunwindself-where-self-trait-stdpanicunwindsafe"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.catch_unwind"},"catch_unwind"),"(self) -> CatchUnwind","<","Self> where Self: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html",title:"trait std::panic::UnwindSafe"},"UnwindSafe"),","),Object(u.b)("p",null,"Catches panics while polling the future. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.catch_unwind"},"Read more")),Object(u.b)("h4",{id:"fn-boxeda-self----struct-corepinpinstruct-allocboxedboxdyn-trait-corefuturefuturefutureoutput--selftype-corefuturefuturefutureoutput--a--trait-coremarkersend-struct-allocallocglobal-where-self-trait-coremarkersend--a"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.boxed"},"boxed"),"<","'a>( self ) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html",title:"struct core::pin::Pin"},"Pin"),"<",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html",title:"struct alloc::boxed::Box"},"Box"),"<","dyn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),"<","Output = Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),"> + 'a + ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html",title:"trait core::marker::Send"},"Send"),", ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html",title:"struct alloc::alloc::Global"},"Global"),">> where Self: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html",title:"trait core::marker::Send"},"Send")," + 'a,"),Object(u.b)("p",null,"Boxes the future and changes its type to ",Object(u.b)("inlineCode",{parentName:"p"},"dyn Future + Send + 'a"),". ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.boxed"},"Read more")),Object(u.b)("h4",{id:"fn-boxed_locala-self----struct-corepinpinstruct-allocboxedboxdyn-trait-corefuturefuturefutureoutput--selftype-corefuturefuturefutureoutput--a-struct-allocallocglobal-where-self-a"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.boxed_local"},"boxed_local"),"<","'a>( self ) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html",title:"struct core::pin::Pin"},"Pin"),"<",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html",title:"struct alloc::boxed::Box"},"Box"),"<","dyn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),"<","Output = Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),"> + 'a, ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html",title:"struct alloc::alloc::Global"},"Global"),">> where Self: 'a,"),Object(u.b)("p",null,"Boxes the future and changes its type to ",Object(u.b)("inlineCode",{parentName:"p"},"dyn Future + 'a"),". ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.boxed_local"},"Read more")),Object(u.b)("h3",{id:"implt-futureext-for-t-where-t-trait-corefuturefuturefuture--trait-coremarkersized"},"impl","<","T> FutureExt for T where T: ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future")," + ?",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),","),Object(u.b)("h4",{id:"fn-mapu-fself-f-f---mapself-f-where-f-trait-coreopsfunctionfnonceselftype-corefuturefuturefutureoutput---u"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.map"},"map"),"<","U, F>(self, f: F) -> Map","<","Self, F> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html",title:"trait core::ops::function::FnOnce"},"FnOnce"),"(Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),") -> U,"),Object(u.b)("p",null,"Map this future\u2019s output to a different type, returning a new future of the resulting type. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.map"},"Read more")),Object(u.b)("h4",{id:"fn-map_intouself---mapintoself-u-where-selftype-corefuturefuturefutureoutput-trait-coreconvertintou"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.map_into"},"map_into"),"<","U>(self) -> MapInto","<","Self, U> where Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),": ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","U>,"),Object(u.b)("p",null,"Map this future\u2019s output to a different type, returning a new future of the resulting type. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.map_into"},"Read more")),Object(u.b)("h4",{id:"fn-thenfut-fself-f-f---thenself-fut-f-where-f-trait-coreopsfunctionfnonceselftype-corefuturefuturefutureoutput---fut-fut-trait-corefuturefuturefuture"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.then"},"then"),"<","Fut, F>(self, f: F) -> Then","<","Self, Fut, F> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html",title:"trait core::ops::function::FnOnce"},"FnOnce"),"(Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),") -> Fut, Fut: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),","),Object(u.b)("p",null,"Chain on a computation for when a future finished, passing the result of the future to the provided closure ",Object(u.b)("inlineCode",{parentName:"p"},"f"),". ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.then"},"Read more")),Object(u.b)("h4",{id:"fn-left_futurebself---eitherself-b-where-b-trait-corefuturefuturefutureoutput--selftype-corefuturefuturefutureoutput"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.left_future"},"left_future"),"<","B>(self) -> Either","<","Self, B> where B: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),"<","Output = Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),">,"),Object(u.b)("p",null,"Wrap this future in an ",Object(u.b)("inlineCode",{parentName:"p"},"Either")," future, making it the left-hand variant of that ",Object(u.b)("inlineCode",{parentName:"p"},"Either"),". ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.left_future"},"Read more")),Object(u.b)("h4",{id:"fn-right_futureaself---eithera-self-where-a-trait-corefuturefuturefutureoutput--selftype-corefuturefuturefutureoutput"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.right_future"},"right_future"),"<","A>(self) -> Either","<","A, Self> where A: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),"<","Output = Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),">,"),Object(u.b)("p",null,"Wrap this future in an ",Object(u.b)("inlineCode",{parentName:"p"},"Either")," future, making it the right-hand variant of that ",Object(u.b)("inlineCode",{parentName:"p"},"Either"),". ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.right_future"},"Read more")),Object(u.b)("h4",{id:"fn-into_streamself---intostreamself"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.into_stream"},"into_stream"),"(self) -> IntoStream","<","Self>"),Object(u.b)("p",null,"Convert this future into a single element stream. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.into_stream"},"Read more")),Object(u.b)("h4",{id:"fn-flattenself---flattenself-where-selftype-corefuturefuturefutureoutput-trait-corefuturefuturefuture"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.flatten"},"flatten"),"(self) -> Flatten","<","Self> where Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),": ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),","),Object(u.b)("p",null,"Flatten the execution of this future when the output of this future is itself another future. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.flatten"},"Read more")),Object(u.b)("h4",{id:"fn-flatten_streamself---flattenstreamself-where-selftype-corefuturefuturefutureoutput-stream"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.flatten_stream"},"flatten_stream"),"(self) -> FlattenStream","<","Self> where Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),": Stream,"),Object(u.b)("p",null,"Flatten the execution of this future when the successful result of this future is a stream. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.flatten_stream"},"Read more")),Object(u.b)("h4",{id:"fn-fuseself---fuseself"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.fuse"},"fuse"),"(self) -> Fuse","<","Self>"),Object(u.b)("p",null,"Fuse a future such that ",Object(u.b)("inlineCode",{parentName:"p"},"poll")," will never again be called once it has completed. This method can be used to turn any ",Object(u.b)("inlineCode",{parentName:"p"},"Future")," into a ",Object(u.b)("inlineCode",{parentName:"p"},"FusedFuture"),". ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.fuse"},"Read more")),Object(u.b)("h4",{id:"fn-inspectfself-f-f---inspectself-f-where-f-trait-coreopsfunctionfnonceselftype-corefuturefuturefutureoutput"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.inspect"},"inspect"),"<","F>(self, f: F) -> Inspect","<","Self, F> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html",title:"trait core::ops::function::FnOnce"},"FnOnce"),"(&Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),"),"),Object(u.b)("p",null,"Do something with the output of a future before passing it on. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.inspect"},"Read more")),Object(u.b)("h4",{id:"fn-catch_unwindself---catchunwindself-where-self-trait-stdpanicunwindsafe-1"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.catch_unwind"},"catch_unwind"),"(self) -> CatchUnwind","<","Self> where Self: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/panic/trait.UnwindSafe.html",title:"trait std::panic::UnwindSafe"},"UnwindSafe"),","),Object(u.b)("p",null,"Catches unwinding panics while polling the future. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.catch_unwind"},"Read more")),Object(u.b)("h4",{id:"fn-sharedself---sharedself-where-selftype-corefuturefuturefutureoutput-trait-corecloneclone"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.shared"},"shared"),"(self) -> Shared","<","Self> where Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),": ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/clone/trait.Clone.html",title:"trait core::clone::Clone"},"Clone"),","),Object(u.b)("p",null,"Create a cloneable handle to this future where all handles will resolve to the same result. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.shared"},"Read more")),Object(u.b)("h4",{id:"fn-remote_handleself---remoteself-remotehandleselftype-corefuturefuturefutureoutput"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.remote_handle"},"remote_handle"),"(self) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html"},"("),"Remote","<","Self>, RemoteHandle","<","Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),">",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.tuple.html"},")")),Object(u.b)("p",null,"Turn this future into a future that yields ",Object(u.b)("inlineCode",{parentName:"p"},"()")," on completion and sends its output to another future on a separate task. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.remote_handle"},"Read more")),Object(u.b)("h4",{id:"fn-boxeda-self----struct-corepinpinstruct-allocboxedboxdyn-trait-corefuturefuturefutureoutput--selftype-corefuturefuturefutureoutput--a--trait-coremarkersend-struct-allocallocglobal-where-self-trait-coremarkersend--a-1"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.boxed"},"boxed"),"<","'a>( self ) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html",title:"struct core::pin::Pin"},"Pin"),"<",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html",title:"struct alloc::boxed::Box"},"Box"),"<","dyn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),"<","Output = Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),"> + 'a + ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html",title:"trait core::marker::Send"},"Send"),", ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html",title:"struct alloc::alloc::Global"},"Global"),">> where Self: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Send.html",title:"trait core::marker::Send"},"Send")," + 'a,"),Object(u.b)("p",null,"Wrap the future in a Box, pinning it. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.boxed"},"Read more")),Object(u.b)("h4",{id:"fn-boxed_locala-self----struct-corepinpinstruct-allocboxedboxdyn-trait-corefuturefuturefutureoutput--selftype-corefuturefuturefutureoutput--a-struct-allocallocglobal-where-self-a-1"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.boxed_local"},"boxed_local"),"<","'a>( self ) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html",title:"struct core::pin::Pin"},"Pin"),"<",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/boxed/struct.Box.html",title:"struct alloc::boxed::Box"},"Box"),"<","dyn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),"<","Output = Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),"> + 'a, ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/alloc/alloc/struct.Global.html",title:"struct alloc::alloc::Global"},"Global"),">> where Self: 'a,"),Object(u.b)("p",null,"Wrap the future in a Box, pinning it. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.boxed_local"},"Read more")),Object(u.b)("h4",{id:"fn-unit_errorself---uniterrorself"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.unit_error"},"unit_error"),"(self) -> UnitError","<","Self>"),Object(u.b)("p",null,"Turns a ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html"},Object(u.b)("inlineCode",{parentName:"a"},"Future<Output = T>"))," into a ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/futures_core::future::TryFuture"},Object(u.b)("inlineCode",{parentName:"a"},"TryFuture<Ok = T, Error = ()"),">"),". ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.unit_error"},"Read more")),Object(u.b)("h4",{id:"fn-never_errorself---nevererrorself"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.never_error"},"never_error"),"(self) -> NeverError","<","Self>"),Object(u.b)("p",null,"Turns a ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html"},Object(u.b)("inlineCode",{parentName:"a"},"Future<Output = T>"))," into a ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/futures_core::future::TryFuture"},Object(u.b)("inlineCode",{parentName:"a"},"TryFuture<Ok = T, Error = Never"),">"),". ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.never_error"},"Read more")),Object(u.b)("h4",{id:"fn-poll_unpinmut-self-cx-mut-struct-coretaskwakecontext_---enum-coretaskpollpollselftype-corefuturefuturefutureoutput-where-self-trait-coremarkerunpin"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.poll_unpin"},"poll_unpin"),"(&mut self, cx: &mut ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html",title:"struct core::task::wake::Context"},"Context"),"<","'","_",">) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html",title:"enum core::task::poll::Poll"},"Poll"),"<","Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),"> where Self: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html",title:"trait core::marker::Unpin"},"Unpin"),","),Object(u.b)("p",null,"A convenience for calling ",Object(u.b)("inlineCode",{parentName:"p"},"Future::poll")," on ",Object(u.b)("inlineCode",{parentName:"p"},"Unpin")," future types."),Object(u.b)("h4",{id:"fn-now_or_neverself---enum-coreoptionoptionselftype-corefuturefuturefutureoutput"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.now_or_never"},"now_or_never"),"(self) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/option/enum.Option.html",title:"enum core::option::Option"},"Option"),"<","Self::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),">"),Object(u.b)("p",null,"Evaluates and consumes the future, returning the resulting output if the future is ready after the first call to ",Object(u.b)("inlineCode",{parentName:"p"},"Future::poll"),". ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.now_or_never"},"Read more")),Object(u.b)("h3",{id:"implt-u-trait-coreconvertintou-for-t-where-u-trait-coreconvertfromtgoto-source-code"},"impl","<","T, U> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","U> for T where U: ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.From.html",title:"trait core::convert::From"},"From"),"<","T>,",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#533-540",title:"goto source code"},"[","src","]")),Object(u.b)("h4",{id:"pub-fn-intoself---ugoto-source-code"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html#tymethod.into"},"into"),"(self) -> U",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#537",title:"goto source code"},"[","src","]")),Object(u.b)("p",null,"Performs the conversion."),Object(u.b)("h3",{id:"implf-trait-corefutureinto_futureintofuture-for-f-where-f-trait-corefuturefuturefuturegoto-source-code"},"impl","<","F> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html",title:"trait core::future::into_future::IntoFuture"},"IntoFuture")," for F where F: ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),",",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/future/into_future.rs.html#20-27",title:"goto source code"},"[","src","]")),Object(u.b)("h4",{id:"type-output--f-as-trait-corefuturefuturefuturetype-corefuturefuturefutureoutput"},"type ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html#associatedtype.Output"},"Output")," = ","<","F as ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),">::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output")),Object(u.b)("p",null,"\ud83d\udd2c This is a nightly-only experimental API. (",Object(u.b)("inlineCode",{parentName:"p"},"into_future"),")"),Object(u.b)("p",null,"The output that the future will produce on completion."),Object(u.b)("h4",{id:"type-future--f"},"type ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html#associatedtype.Future"},"Future")," = F"),Object(u.b)("p",null,"\ud83d\udd2c This is a nightly-only experimental API. (",Object(u.b)("inlineCode",{parentName:"p"},"into_future"),")"),Object(u.b)("p",null,"Which kind of future are we turning this into?"),Object(u.b)("h4",{id:"pub-fn-into_futureself---f-as-trait-corefutureinto_futureintofuturetype-corefutureinto_futureintofuturefuturegoto-source-code"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html#tymethod.into_future"},"into_future"),"(self) -> ","<","F as ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html",title:"trait core::future::into_future::IntoFuture"},"IntoFuture"),">::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/into_future/trait.IntoFuture.html#associatedtype.Future",title:"type core::future::into_future::IntoFuture::Future"},"Future"),Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/future/into_future.rs.html#24",title:"goto source code"},"[","src","]")),Object(u.b)("p",null,"\ud83d\udd2c This is a nightly-only experimental API. (",Object(u.b)("inlineCode",{parentName:"p"},"into_future"),")"),Object(u.b)("p",null,"Creates a future from a value."),Object(u.b)("h3",{id:"implt-u-trait-coreconverttryfromu-for-t-where-u-trait-coreconvertintotgoto-source-code"},"impl","<","T, U> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","U> for T where U: ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","T>,",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#581-590",title:"goto source code"},"[","src","]")),Object(u.b)("h4",{id:"type-error--enum-coreconvertinfallible"},"type ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error"},"Error")," = ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/enum.Infallible.html",title:"enum core::convert::Infallible"},"Infallible")),Object(u.b)("p",null,"The type returned in the event of a conversion error."),Object(u.b)("h4",{id:"pub-fn-try_fromvalue-u---enum-coreresultresultt-t-as-trait-coreconverttryfromutype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#tymethod.try_from"},"try_from"),"(value: U) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<","T, ","<","T as ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","U>>::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#587",title:"goto source code"},"[","src","]")),Object(u.b)("p",null,"Performs the conversion."),Object(u.b)("h3",{id:"implf-t-e-tryfuture-for-f-where-f-trait-corefuturefuturefutureoutput--enum-coreresultresultt-e--trait-coremarkersized"},"impl","<","F, T, E> TryFuture for F where F: ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),"<","Output = ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<","T, E>> + ?",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),","),Object(u.b)("h4",{id:"type-ok--t"},"type ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#associatedtype.Ok"},"Ok")," = T"),Object(u.b)("p",null,"The type of successful values yielded by this future"),Object(u.b)("h4",{id:"type-error--e"},"type ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#associatedtype.Error"},"Error")," = E"),Object(u.b)("p",null,"The type of failures yielded by this future"),Object(u.b)("h4",{id:"pub-fn-try_poll-self-struct-corepinpinmutf-cx-mut-struct-coretaskwakecontext_----enum-coretaskpollpollf-as-trait-corefuturefuturefuturetype-corefuturefuturefutureoutput"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#tymethod.try_poll"},"try_poll"),"( self: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/pin/struct.Pin.html",title:"struct core::pin::Pin"},"Pin"),"<",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/std/primitive.reference.html"},"&mut"),"F>, cx: &mut ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html",title:"struct core::task::wake::Context"},"Context"),"<","'","_","> ) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html",title:"enum core::task::poll::Poll"},"Poll"),"<","<","F as ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html",title:"trait core::future::future::Future"},"Future"),">::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output",title:"type core::future::future::Future::Output"},"Output"),">"),Object(u.b)("p",null,"Poll this ",Object(u.b)("inlineCode",{parentName:"p"},"TryFuture")," as if it were a ",Object(u.b)("inlineCode",{parentName:"p"},"Future"),". ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#tymethod.try_poll"},"Read more")),Object(u.b)("h3",{id:"implfut-tryfutureext-for-fut-where-fut-tryfuture--trait-coremarkersized"},"impl","<","Fut> TryFutureExt for Fut where Fut: TryFuture + ?",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Sized.html",title:"trait core::marker::Sized"},"Sized"),","),Object(u.b)("h4",{id:"fn-flatten_sinkitemself---flattensinkself-selfok-where-selfok-sinkitem-selfok-as-sinkitemerror--selferror"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.flatten_sink"},"flatten_sink"),"<","Item>(self) -> FlattenSink","<","Self, Self::Ok> where Self::Ok: Sink","<","Item>, ","<","Self::Ok as Sink","<","Item>>::Error == Self::Error,"),Object(u.b)("p",null,"Flattens the execution of this future when the successful result of this future is a ","[",Object(u.b)("inlineCode",{parentName:"p"},"Sink"),"]. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.flatten_sink"},"Read more")),Object(u.b)("h4",{id:"fn-map_okt-fself-f-f---mapokself-f-where-f-trait-coreopsfunctionfnonceselfok---t"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.map_ok"},"map_ok"),"<","T, F>(self, f: F) -> MapOk","<","Self, F> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html",title:"trait core::ops::function::FnOnce"},"FnOnce"),"(Self::Ok) -> T,"),Object(u.b)("p",null,"Maps this future\u2019s success value to a different value. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.map_ok"},"Read more")),Object(u.b)("h4",{id:"fn-map_ok_or_elset-e-fself-e-e-f-f---mapokorelseself-f-e-where-f-trait-coreopsfunctionfnonceselfok---t-e-trait-coreopsfunctionfnonceselferror---t"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.map_ok_or_else"},"map_ok_or_else"),"<","T, E, F>(self, e: E, f: F) -> MapOkOrElse","<","Self, F, E> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html",title:"trait core::ops::function::FnOnce"},"FnOnce"),"(Self::Ok) -> T, E: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html",title:"trait core::ops::function::FnOnce"},"FnOnce"),"(Self::Error) -> T,"),Object(u.b)("p",null,"Maps this future\u2019s success value to a different value, and permits for error handling resulting in the same type. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.map_ok_or_else"},"Read more")),Object(u.b)("h4",{id:"fn-map_erre-fself-f-f---maperrself-f-where-f-trait-coreopsfunctionfnonceselferror---e"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.map_err"},"map_err"),"<","E, F>(self, f: F) -> MapErr","<","Self, F> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html",title:"trait core::ops::function::FnOnce"},"FnOnce"),"(Self::Error) -> E,"),Object(u.b)("p",null,"Maps this future\u2019s error value to a different value. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.map_err"},"Read more")),Object(u.b)("h4",{id:"fn-err_intoeself---errintoself-e-where-selferror-trait-coreconvertintoe"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.err_into"},"err_into"),"<","E>(self) -> ErrInto","<","Self, E> where Self::Error: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","E>,"),Object(u.b)("p",null,"Maps this future\u2019s ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/tryfuture::Error"},Object(u.b)("inlineCode",{parentName:"a"},"Error"))," to a new error type using the ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html"},Object(u.b)("inlineCode",{parentName:"a"},"Into"))," trait. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.err_into"},"Read more")),Object(u.b)("h4",{id:"fn-ok_intouself---okintoself-u-where-selfok-trait-coreconvertintou"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.ok_into"},"ok_into"),"<","U>(self) -> OkInto","<","Self, U> where Self::Ok: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html",title:"trait core::convert::Into"},"Into"),"<","U>,"),Object(u.b)("p",null,"Maps this future\u2019s ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/tryfuture::Ok"},Object(u.b)("inlineCode",{parentName:"a"},"Ok"))," to a new type using the ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.Into.html"},Object(u.b)("inlineCode",{parentName:"a"},"Into"))," trait. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.ok_into"},"Read more")),Object(u.b)("h4",{id:"fn-and_thenfut-fself-f-f---andthenself-fut-f-where-f-trait-coreopsfunctionfnonceselfok---fut-fut-tryfutureerror--selferror"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.and_then"},"and_then"),"<","Fut, F>(self, f: F) -> AndThen","<","Self, Fut, F> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html",title:"trait core::ops::function::FnOnce"},"FnOnce"),"(Self::Ok) -> Fut, Fut: TryFuture","<","Error = Self::Error>,"),Object(u.b)("p",null,"Executes another future after this one resolves successfully. The success value is passed to a closure to create this subsequent future. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.and_then"},"Read more")),Object(u.b)("h4",{id:"fn-or_elsefut-fself-f-f---orelseself-fut-f-where-f-trait-coreopsfunctionfnonceselferror---fut-fut-tryfutureok--selfok"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.or_else"},"or_else"),"<","Fut, F>(self, f: F) -> OrElse","<","Self, Fut, F> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html",title:"trait core::ops::function::FnOnce"},"FnOnce"),"(Self::Error) -> Fut, Fut: TryFuture","<","Ok = Self::Ok>,"),Object(u.b)("p",null,"Executes another future if this one resolves to an error. The error value is passed to a closure to create this subsequent future. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.or_else"},"Read more")),Object(u.b)("h4",{id:"fn-inspect_okfself-f-f---inspectokself-f-where-f-trait-coreopsfunctionfnonceselfok"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.inspect_ok"},"inspect_ok"),"<","F>(self, f: F) -> InspectOk","<","Self, F> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html",title:"trait core::ops::function::FnOnce"},"FnOnce"),"(&Self::Ok),"),Object(u.b)("p",null,"Do something with the success value of a future before passing it on. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.inspect_ok"},"Read more")),Object(u.b)("h4",{id:"fn-inspect_errfself-f-f---inspecterrself-f-where-f-trait-coreopsfunctionfnonceselferror"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.inspect_err"},"inspect_err"),"<","F>(self, f: F) -> InspectErr","<","Self, F> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html",title:"trait core::ops::function::FnOnce"},"FnOnce"),"(&Self::Error),"),Object(u.b)("p",null,"Do something with the error value of a future before passing it on. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.inspect_err"},"Read more")),Object(u.b)("h4",{id:"fn-try_flattenself---tryflattenself-selfok-where-selfok-tryfuture-selfok-as-tryfutureerror--selferror"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.try_flatten"},"try_flatten"),"(self) -> TryFlatten","<","Self, Self::Ok> where Self::Ok: TryFuture, ","<","Self::Ok as TryFuture>::Error == Self::Error,"),Object(u.b)("p",null,"Flatten the execution of this future when the successful result of this future is another future. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.try_flatten"},"Read more")),Object(u.b)("h4",{id:"fn-try_flatten_streamself---tryflattenstreamself-where-selfok-trystream-selfok-as-trystreamerror--selferror"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.try_flatten_stream"},"try_flatten_stream"),"(self) -> TryFlattenStream","<","Self> where Self::Ok: TryStream, ","<","Self::Ok as TryStream>::Error == Self::Error,"),Object(u.b)("p",null,"Flatten the execution of this future when the successful result of this future is a stream. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.try_flatten_stream"},"Read more")),Object(u.b)("h4",{id:"fn-unwrap_or_elsefself-f-f---unwraporelseself-f-where-f-trait-coreopsfunctionfnonceselferror---selfok"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.unwrap_or_else"},"unwrap_or_else"),"<","F>(self, f: F) -> UnwrapOrElse","<","Self, F> where F: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/ops/function/trait.FnOnce.html",title:"trait core::ops::function::FnOnce"},"FnOnce"),"(Self::Error) -> Self::Ok,"),Object(u.b)("p",null,"Unwraps this future\u2019s output, producing a future with this future\u2019s ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/tryfuture::Ok"},Object(u.b)("inlineCode",{parentName:"a"},"Ok"))," type as its ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html#associatedtype.Output"},Object(u.b)("inlineCode",{parentName:"a"},"Output"))," type. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.unwrap_or_else"},"Read more")),Object(u.b)("h4",{id:"fn-into_futureself---intofutureself"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.into_future"},"into_future"),"(self) -> IntoFuture","<","Self>"),Object(u.b)("p",null,"Wraps a ","[",Object(u.b)("inlineCode",{parentName:"p"},"TryFuture"),"] into a type that implements ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/future/future/trait.Future.html"},Object(u.b)("inlineCode",{parentName:"a"},"Future")),". ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.into_future"},"Read more")),Object(u.b)("h4",{id:"fn-try_poll_unpin-mut-self-cx-mut-struct-coretaskwakecontext_----enum-coretaskpollpollenum-coreresultresultselfok-selferror-where-self-trait-coremarkerunpin"},"fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#method.try_poll_unpin"},"try_poll_unpin"),"( &mut self, cx: &mut ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/task/wake/struct.Context.html",title:"struct core::task::wake::Context"},"Context"),"<","'","_","> ) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/task/poll/enum.Poll.html",title:"enum core::task::poll::Poll"},"Poll"),"<",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<","Self::Ok, Self::Error>> where Self: ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html",title:"trait core::marker::Unpin"},"Unpin"),","),Object(u.b)("p",null,"A convenience method for calling ","[",Object(u.b)("inlineCode",{parentName:"p"},"TryFuture::try_poll"),"] on ",Object(u.b)("a",{parentName:"p",href:"https://doc.rust-lang.org/1.54.0/core/marker/trait.Unpin.html",title:"Unpin"},Object(u.b)("inlineCode",{parentName:"a"},"Unpin"))," future types. ",Object(u.b)("a",{parentName:"p",href:"/docs/api/rust/tauri/about:blank#method.try_poll_unpin"},"Read more")),Object(u.b)("h3",{id:"implt-u-trait-coreconverttryintou-for-t-where-u-trait-coreconverttryfromtgoto-source-code"},"impl","<","T, U> ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html",title:"trait core::convert::TryInto"},"TryInto"),"<","U> for T where U: ",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>,",Object(u.b)("a",{parentName:"h3",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#567-576",title:"goto source code"},"[","src","]")),Object(u.b)("h4",{id:"type-error--u-as-trait-coreconverttryfromttype-coreconverttryfromerror"},"type ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#associatedtype.Error"},"Error")," = ","<","U as ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>>::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error")),Object(u.b)("p",null,"The type returned in the event of a conversion error."),Object(u.b)("h4",{id:"pub-fn-try_intoself---enum-coreresultresultu-u-as-trait-coreconverttryfromttype-coreconverttryfromerrorgoto-source-code"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryInto.html#tymethod.try_into"},"try_into"),"(self) -> ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/result/enum.Result.html",title:"enum core::result::Result"},"Result"),"<","U, ","<","U as ",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html",title:"trait core::convert::TryFrom"},"TryFrom"),"<","T>>::",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/core/convert/trait.TryFrom.html#associatedtype.Error",title:"type core::convert::TryFrom::Error"},"Error"),">",Object(u.b)("a",{parentName:"h4",href:"https://doc.rust-lang.org/1.54.0/src/core/convert/mod.rs.html#573",title:"goto source code"},"[","src","]")),Object(u.b)("p",null,"Performs the conversion."),Object(u.b)("h3",{id:"implv-t-vzipv-for-t-where-v-multilanet"},"impl","<","V, T> VZip","<","V> for T where V: MultiLane","<","T>,"),Object(u.b)("h4",{id:"pub-fn-vzipself---v"},"pub fn ",Object(u.b)("a",{parentName:"h4",href:"/docs/api/rust/tauri/about:blank#tymethod.vzip"},"vzip"),"(self) -> V"))}s.isMDXComponent=!0},454:function(t,e,r){"use strict";r.d(e,"a",(function(){return p})),r.d(e,"b",(function(){return b}));var a=r(0),o=r.n(a);function u(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function c(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){u(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,a,o=function(t,e){if(null==t)return{};var r,a,o={},u=Object.keys(t);for(a=0;a<u.length;a++)r=u[a],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(t);for(a=0;a<u.length;a++)r=u[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var l=o.a.createContext({}),s=function(t){var e=o.a.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):c(c({},e),t)),r},p=function(t){var e=s(t.components);return o.a.createElement(l.Provider,{value:e},t.children)},f={inlineCode:"code",wrapper:function(t){var e=t.children;return o.a.createElement(o.a.Fragment,{},e)}},h=o.a.forwardRef((function(t,e){var r=t.components,a=t.mdxType,u=t.originalType,n=t.parentName,l=i(t,["components","mdxType","originalType","parentName"]),p=s(r),h=a,b=p["".concat(n,".").concat(h)]||p[h]||f[h]||u;return r?o.a.createElement(b,c(c({ref:e},l),{},{components:r})):o.a.createElement(b,c({ref:e},l))}));function b(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var u=r.length,n=new Array(u);n[0]=h;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=t,c.mdxType="string"==typeof t?t:a,n[1]=c;for(var l=2;l<u;l++)n[l]=r[l];return o.a.createElement.apply(null,n)}return o.a.createElement.apply(null,r)}h.displayName="MDXCreateElement"}}]);