(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{154:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return u})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return m}));var a=n(3),r=n(7),i=(n(0),n(454)),s={title:"System Tray"},u={unversionedId:"usage/guides/visual/system-tray",id:"usage/guides/visual/system-tray",isDocsHomePage:!1,title:"System Tray",description:"Native application system tray.",source:"@site/docs/zh-hans/usage/guides/visual/system-tray.md",sourceDirName:"usage/guides/visual",slug:"/usage/guides/visual/system-tray",permalink:"/zh-hans/docs/usage/guides/visual/system-tray",editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/zh-hans/usage/guides/visual/system-tray.md",version:"current",frontMatter:{title:"System Tray"},sidebar:"docs",previous:{title:"Window Menu",permalink:"/zh-hans/docs/usage/guides/visual/menu"},next:{title:"Introduction",permalink:"/zh-hans/docs/usage/guides/webdriver/introduction"}},c=[{value:"Setup",id:"setup",children:[]},{value:"Creating a system tray",id:"creating-a-system-tray",children:[]},{value:"Configuring a system tray context menu",id:"configuring-a-system-tray-context-menu",children:[]},{value:"Configure the app system tray",id:"configure-the-app-system-tray",children:[]},{value:"Listening to system tray events",id:"listening-to-system-tray-events",children:[]},{value:"Updating system tray",id:"updating-system-tray",children:[]}],o={toc:c};function m(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Native application system tray."),Object(i.b)("h3",{id:"setup"},"Setup"),Object(i.b)("p",null,"Configure the ",Object(i.b)("inlineCode",{parentName:"p"},"systemTray")," object on ",Object(i.b)("inlineCode",{parentName:"p"},"tauri.conf.json"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "tauri": {\n    "systemTray": {\n      "iconPath": "icons/icon.png",\n      "iconAsTemplate": true,\n    }\n  }\n}\n')),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"iconPath")," is pointed to a PNG file on macOS and Linux, and a ",Object(i.b)("inlineCode",{parentName:"p"},".ico")," file must exist for Windows support."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"iconAsTemplate")," is a boolean value that determines whether the image represents a ",Object(i.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/appkit/nsimage/1520017-template?language=objc"},"template")," image on macOS."),Object(i.b)("h3",{id:"creating-a-system-tray"},"Creating a system tray"),Object(i.b)("p",null,"To create a native system tray, import the ",Object(i.b)("inlineCode",{parentName:"p"},"SystemTray")," type:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},"use tauri::SystemTray;\n")),Object(i.b)("p",null,"Initialize a new tray instance:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},"let tray = SystemTray::new();\n")),Object(i.b)("h3",{id:"configuring-a-system-tray-context-menu"},"Configuring a system tray context menu"),Object(i.b)("p",null,"Optionally you can add a context menu that is visible when the tray icon is right clicked. Import the ",Object(i.b)("inlineCode",{parentName:"p"},"SystemTrayMenu"),", ",Object(i.b)("inlineCode",{parentName:"p"},"SystemTrayMenuItem")," and ",Object(i.b)("inlineCode",{parentName:"p"},"CustomMenuItem")," types:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},"use tauri::{CustomMenuItem, SystemTrayMenu, SystemTrayMenuItem};\n")),Object(i.b)("p",null,"Create the ",Object(i.b)("inlineCode",{parentName:"p"},"SystemTrayMenu"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},'// here `"quit".to_string()` defines the menu item id, and the second parameter is the menu item label.\nlet quit = CustomMenuItem::new("quit".to_string(), "Quit");\nlet hide = CustomMenuItem::new("hide".to_string(), "Hide");\nlet tray_menu = SystemTrayMenu::new()\n  .add_item(quit)\n  .add_native_item(SystemTrayMenuItem::Separator)\n  .add_item(hide);\n')),Object(i.b)("p",null,"Add the tray menu to the ",Object(i.b)("inlineCode",{parentName:"p"},"SystemTray")," instance:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},"let tray = SystemTray::new().with_menu(tray_menu);\n")),Object(i.b)("h3",{id:"configure-the-app-system-tray"},"Configure the app system tray"),Object(i.b)("p",null,"The created ",Object(i.b)("inlineCode",{parentName:"p"},"SystemTray")," instance can be set using the ",Object(i.b)("inlineCode",{parentName:"p"},"system_tray")," API on the ",Object(i.b)("inlineCode",{parentName:"p"},"tauri::Builder")," struct:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},'use tauri::{CustomMenuItem, SystemTray, SystemTrayMenu};\n\nfn main() {\n  let tray_menu = SystemTrayMenu::new(); // insert the menu items here\n  let system_tray = SystemTray::new()\n    .with_menu(tray_menu);\n  tauri::Builder::default()\n    .system_tray(system_tray)\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),Object(i.b)("h3",{id:"listening-to-system-tray-events"},"Listening to system tray events"),Object(i.b)("p",null,"Each ",Object(i.b)("inlineCode",{parentName:"p"},"CustomMenuItem")," triggers an event when clicked.\nAlso, Tauri emits tray icon click events.\nUse the ",Object(i.b)("inlineCode",{parentName:"p"},"on_system_tray_event")," API to handle them:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},'use tauri::{CustomMenuItem, SystemTray, SystemTrayMenu};\nuse tauri::Manager;\n\nfn main() {\n  let tray_menu = SystemTrayMenu::new(); // insert the menu items here\n  tauri::Builder::default()\n    .system_tray(SystemTray::new().with_menu(tray_menu))\n    .on_system_tray_event(|app, event| match event {\n      SystemTrayEvent::LeftClick {\n        position: _,\n        size: _,\n        ..\n      } => {\n        println!("system tray received a left click");\n      }\n      SystemTrayEvent::RightClick {\n        position: _,\n        size: _,\n        ..\n      } => {\n        println!("system tray received a right click");\n      }\n      SystemTrayEvent::DoubleClick {\n        position: _,\n        size: _,\n        ..\n      } => {\n        println!("system tray received a double click");\n      }\n      SystemTrayEvent::MenuItemClick { id, .. } => {\n        match id.as_str() {\n          "quit" => {\n            std::process::exit(0);\n          }\n          "hide" => {\n            let window = app.get_window("main").unwrap();\n            window.hide().unwrap();\n          }\n          _ => {}\n        }\n      }\n      _ => {}\n    })\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),Object(i.b)("h3",{id:"updating-system-tray"},"Updating system tray"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"AppHandle")," struct has a ",Object(i.b)("inlineCode",{parentName:"p"},"tray_handle")," method, which returns a handle to the system tray allowing updating tray icon and context menu items:"),Object(i.b)("h4",{id:"updating-context-menu-items"},"Updating context menu items"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},'use tauri::{CustomMenuItem, SystemTray, SystemTrayMenu};\nuse tauri::Manager;\n\nfn main() {\n  let tray_menu = SystemTrayMenu::new(); // insert the menu items here\n  tauri::Builder::default()\n    .system_tray(SystemTray::new().with_menu(tray_menu))\n    .on_system_tray_event(|app, event| match event {\n      SystemTrayEvent::MenuItemClick { id, .. } => {\n        // get a handle to the clicked menu item\n        // note that `tray_handle` can be called anywhere,\n        // just get a `AppHandle` instance with `app.handle()` on the setup hook\n        // and move it to another function or thread\n        let item_handle = app.tray_handle().get_item(&id);\n        match id.as_str() {\n          "hide" => {\n            let window = app.get_window("main").unwrap();\n            window.hide().unwrap();\n            // you can also `set_selected`, `set_enabled` and `set_native_image` (macOS only).\n            item_handle.set_title("Show").unwrap();\n          }\n          _ => {}\n        }\n      }\n      _ => {}\n    })\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),Object(i.b)("h4",{id:"updating-tray-icon"},"Updating tray icon"),Object(i.b)("p",null,"Note that ",Object(i.b)("inlineCode",{parentName:"p"},"tauri::Icon")," must be a ",Object(i.b)("inlineCode",{parentName:"p"},"Path")," variant on Linux, and ",Object(i.b)("inlineCode",{parentName:"p"},"Raw")," variant on Windows and macOS."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},'app.tray_handle().set_icon(tauri::Icon::Raw(include_bytes!("../path/to/myicon.ico"))).unwrap();\n')))}m.isMDXComponent=!0},454:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),m=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},l=function(e){var t=m(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},y=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),l=m(n),y=a,d=l["".concat(s,".").concat(y)]||l[y]||p[y]||i;return n?r.a.createElement(d,u(u({ref:t},o),{},{components:n})):r.a.createElement(d,u({ref:t},o))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=y;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:a,s[1]=u;for(var o=2;o<i;o++)s[o]=n[o];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}y.displayName="MDXCreateElement"}}]);