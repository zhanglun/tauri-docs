(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{107:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return l}));var i=t(3),a=t(7),u=(t(0),t(454)),r={title:"Window Menu"},o={unversionedId:"usage/guides/visual/menu",id:"usage/guides/visual/menu",isDocsHomePage:!1,title:"Window Menu",description:"Native application menus can be attached to a window.",source:"@site/docs/zh-hans/usage/guides/visual/menu.md",sourceDirName:"usage/guides/visual",slug:"/usage/guides/visual/menu",permalink:"/tauri-docs/docs/usage/guides/visual/menu",editUrl:"https://github.com/tauri-apps/tauri-docs/edit/dev/docs/zh-hans/usage/guides/visual/menu.md",version:"current",frontMatter:{title:"Window Menu"},sidebar:"docs",previous:{title:"Window Customization",permalink:"/tauri-docs/docs/usage/guides/visual/window-customization"},next:{title:"System Tray",permalink:"/tauri-docs/docs/usage/guides/visual/system-tray"}},s=[{value:"Creating a menu",id:"creating-a-menu",children:[]},{value:"Adding the menu to all windows",id:"adding-the-menu-to-all-windows",children:[]},{value:"Adding the menu to a specific window",id:"adding-the-menu-to-a-specific-window",children:[]},{value:"Listening to events on custom menu items",id:"listening-to-events-on-custom-menu-items",children:[]},{value:"Updating menu items",id:"updating-menu-items",children:[]}],c={toc:s};function l(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(u.b)("wrapper",Object(i.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(u.b)("p",null,"Native application menus can be attached to a window."),Object(u.b)("h3",{id:"creating-a-menu"},"Creating a menu"),Object(u.b)("p",null,"To create a native window menu, import the ",Object(u.b)("inlineCode",{parentName:"p"},"Menu"),", ",Object(u.b)("inlineCode",{parentName:"p"},"Submenu"),", ",Object(u.b)("inlineCode",{parentName:"p"},"MenuItem")," and ",Object(u.b)("inlineCode",{parentName:"p"},"CustomMenuItem")," types.\nThe ",Object(u.b)("inlineCode",{parentName:"p"},"MenuItem")," enum contains a collection of platform-specific items (currently not implemented on Windows).\nThe ",Object(u.b)("inlineCode",{parentName:"p"},"CustomMenuItem")," allows you to create your own menu items and add special functionality to them."),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rust"},"use tauri::{CustomMenuItem, Menu, MenuItem, Submenu};\n")),Object(u.b)("p",null,"Create a ",Object(u.b)("inlineCode",{parentName:"p"},"Menu")," instance:"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rust"},'// here `"quit".to_string()` defines the menu item id, and the second parameter is the menu item label.\nlet quit = CustomMenuItem::new("quit".to_string(), "Quit");\nlet close = CustomMenuItem::new("close".to_string(), "Close");\nlet submenu = Submenu::new("File", Menu::new().add_item(quit).add_item(close));\nlet menu = Menu::new()\n  .add_native_item(MenuItem::Copy)\n  .add_item(CustomMenuItem::new("hide", "Hide"))\n  .add_submenu(submenu);\n')),Object(u.b)("h3",{id:"adding-the-menu-to-all-windows"},"Adding the menu to all windows"),Object(u.b)("p",null,"The defined menu can be set to all windows using the ",Object(u.b)("inlineCode",{parentName:"p"},"menu")," API on the ",Object(u.b)("inlineCode",{parentName:"p"},"tauri::Builder")," struct:"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rust"},'use tauri::{CustomMenuItem, Menu, MenuItem, Submenu};\n\nfn main() {\n  let menu = Menu::new(); // configure the menu\n  tauri::Builder::default()\n    .menu(menu)\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),Object(u.b)("h3",{id:"adding-the-menu-to-a-specific-window"},"Adding the menu to a specific window"),Object(u.b)("p",null,"You can create a window and set the menu to be used. This allows defining a specific menu set for each application window."),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rust"},'use tauri::{CustomMenuItem, Menu, MenuItem, Submenu};\nuse tauri::WindowBuilder;\n\nfn main() {\n  let menu = Menu::new(); // configure the menu\n  tauri::Builder::default()\n    .create_window(\n      "main-window".to_string(),\n      tauri::WindowUrl::App("index.html".into()),\n      move |window_builder, webview_attributes| {\n        (window_builder.menu(menu), webview_attributes)\n      },\n    )\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),Object(u.b)("h3",{id:"listening-to-events-on-custom-menu-items"},"Listening to events on custom menu items"),Object(u.b)("p",null,"Each ",Object(u.b)("inlineCode",{parentName:"p"},"CustomMenuItem")," triggers an event when clicked. Use the ",Object(u.b)("inlineCode",{parentName:"p"},"on_menu_event")," API to handle them, either on the global ",Object(u.b)("inlineCode",{parentName:"p"},"tauri::Builder")," or on an specific window."),Object(u.b)("h4",{id:"listening-to-events-on-global-menus"},"Listening to events on global menus"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rust"},'use tauri::{CustomMenuItem, Menu, MenuItem};\n\nfn main() {\n  let menu = vec![]; // insert the menu array here\n  tauri::Builder::default()\n    .menu(menu)\n    .on_menu_event(|event| {\n      match event.menu_item_id() {\n        "quit" => {\n          std::process::exit(0);\n        }\n        "close" => {\n          event.window().close().unwrap();\n        }\n        _ => {}\n      }\n    })\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),Object(u.b)("h4",{id:"listening-to-events-on-window-menus"},"Listening to events on window menus"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rust"},'use tauri::{CustomMenuItem, Menu, MenuItem};\nuse tauri::{Manager, WindowBuilder};\n\nfn main() {\n  let menu = vec![]; // insert the menu array here\n  tauri::Builder::default()\n    .create_window(\n      "main-window".to_string(),\n      tauri::WindowUrl::App("index.html".into()),\n      move |window_builder, webview_attributes| {\n        (window_builder.menu(menu), webview_attributes)\n      },\n    )\n    .setup(|app| {\n      let window = app.get_window("main-window").unwrap();\n      let window_ = window.clone();\n      window.on_menu_event(move |event| {\n        match event.menu_item_id().as_str() {\n          "quit" => {\n            std::process::exit(0);\n          }\n          "close" => {\n            window_.close().unwrap();\n          }\n          _ => {}\n        }\n      });\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .expect("error while running tauri application");\n}\n')),Object(u.b)("h3",{id:"updating-menu-items"},"Updating menu items"),Object(u.b)("p",null,"The ",Object(u.b)("inlineCode",{parentName:"p"},"Window")," struct has a ",Object(u.b)("inlineCode",{parentName:"p"},"menu_handle")," method, which allows updating menu items:"),Object(u.b)("pre",null,Object(u.b)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n  tauri::Builder::default()\n    .setup(|app| {\n      let main_window = app.get_window("main").unwrap();\n      let menu_handle = main_window.menu_handle();\n      std::thread::spawn(move || {\n        // you can also `set_selected`, `set_enabled` and `set_native_image` (macOS only).\n        menu_handle.get_item("item_id").set_title("New title");\n      })\n      Ok(())\n    })\n}\n')))}l.isMDXComponent=!0},454:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return b}));var i=t(0),a=t.n(i);function u(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){u(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},u=Object.keys(e);for(i=0;i<u.length;i++)t=u[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(i=0;i<u.length;i++)t=u[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),l=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=l(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=a.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,u=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(t),p=i,b=m["".concat(r,".").concat(p)]||m[p]||d[p]||u;return t?a.a.createElement(b,o(o({ref:n},c),{},{components:t})):a.a.createElement(b,o({ref:n},c))}));function b(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var u=t.length,r=new Array(u);r[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var c=2;c<u;c++)r[c]=t[c];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);