(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{211:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return i})),t.d(r,"metadata",(function(){return l})),t.d(r,"toc",(function(){return o})),t.d(r,"default",(function(){return p}));var a=t(3),n=t(7),c=(t(0),t(454)),i={title:"Fn tauri::api::rpc::format_callback",sidebar_label:"fn.format_callback",custom_edit_url:null},l={unversionedId:"api/rust/tauri/api/rpc/fn.format_callback",id:"api/rust/tauri/api/rpc/fn.format_callback",isDocsHomePage:!1,title:"Fn tauri::api::rpc::format_callback",description:"`rs",source:"@site/docs/en/api/rust/tauri/api/rpc/fn.format_callback.md",sourceDirName:"api/rust/tauri/api/rpc",slug:"/api/rust/tauri/api/rpc/fn.format_callback",permalink:"/en/docs/api/rust/tauri/api/rpc/fn.format_callback",editUrl:null,version:"current",sidebar_label:"fn.format_callback",frontMatter:{title:"Fn tauri::api::rpc::format_callback",sidebar_label:"fn.format_callback",custom_edit_url:null},sidebar:"docs",previous:{title:"Fn tauri::api::process::restart",permalink:"/en/docs/api/rust/tauri/api/process/fn.restart"},next:{title:"Fn tauri::api::rpc::format_callback_result",permalink:"/en/docs/api/rust/tauri/api/rpc/fn.format_callback_result"}},o=[{value:"Examples",id:"examples",children:[]}],s={toc:o};function p(e){var r=e.components,t=Object(n.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},s,t,{components:r,mdxType:"MDXLayout"}),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},"pub fn format_callback<T:\xa0Serialize, S:\xa0AsRef<str>>(\n\xa0\xa0\xa0\xa0function_name: S, \n\xa0\xa0\xa0\xa0arg: &T\n) -> Result<String>\n")),Object(c.b)("p",null,"Expand description"),Object(c.b)("p",null,"Formats a function name and argument to be evaluated as callback."),Object(c.b)("p",null,"This will serialize primitive JSON types (e.g. booleans, strings, numbers, etc.) as JavaScript literals, but will serialize arrays and objects whose serialized JSON string is smaller than 1 GB and larger than 10 KiB with ",Object(c.b)("inlineCode",{parentName:"p"},"JSON.parse('...')"),". See ",Object(c.b)("a",{parentName:"p",href:"https://github.com/GoogleChromeLabs/json-parse-benchmark"},"json-parse-benchmark"),"."),Object(c.b)("h2",{id:"examples"},"Examples"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"With string literals:")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'use tauri::api::rpc::format_callback;\n// callback with a string argument\nlet cb = format_callback("callback-function-name", &"the string response").unwrap();\nassert!(cb.contains(r#"window["callback-function-name"]("the string response")"#));\n')),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"With types implement ",Object(c.b)("a",{parentName:"li",href:"https://docs.rs/serde/1.0.129/serde/ser/trait.Serialize.html",title:"serde::Serialize"},Object(c.b)("inlineCode",{parentName:"a"},"serde::Serialize")),":")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-rs"},'use tauri::api::rpc::format_callback;\nuse serde::Serialize;\n\n// callback with large JSON argument\n#[derive(Serialize)]\n\nstruct MyResponse {\n  value: String\n}\n\nlet cb = format_callback(\n  "callback-function-name",\n  &MyResponse { value: String::from_utf8(vec&#33;[b\'X\'; 10_240]).unwrap()\n}).expect("failed to serialize");\n\nassert!(cb.contains(r#"window["callback-function-name"](JSON.parse(\'{"value":"XXXXXXXXX"#));\n')))}p.isMDXComponent=!0},454:function(e,r,t){"use strict";t.d(r,"a",(function(){return u})),t.d(r,"b",(function(){return f}));var a=t(0),n=t.n(a);function c(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){c(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)t=c[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=n.a.createContext({}),p=function(e){var r=n.a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},u=function(e){var r=p(e.components);return n.a.createElement(s.Provider,{value:r},e.children)},b={inlineCode:"code",wrapper:function(e){var r=e.children;return n.a.createElement(n.a.Fragment,{},r)}},m=n.a.forwardRef((function(e,r){var t=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,f=u["".concat(i,".").concat(m)]||u[m]||b[m]||c;return t?n.a.createElement(f,l(l({ref:r},s),{},{components:t})):n.a.createElement(f,l({ref:r},s))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var c=t.length,i=new Array(c);i[0]=m;var l={};for(var o in r)hasOwnProperty.call(r,o)&&(l[o]=r[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<c;s++)i[s]=t[s];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);